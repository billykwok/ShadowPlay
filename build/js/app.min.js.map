{"version":3,"sources":["collections.ts","keyboardState.ts","base.ts","road.ts","character.ts","app.ts"],"names":["collections","collections.defaultCompare","collections.defaultEquals","collections.defaultToString","collections.makeString","collections.isFunction","collections.isUndefined","collections.isString","collections.reverseCompareFunction","collections.compareToEquals","collections.arrays","collections.arrays.indexOf","collections.arrays.lastIndexOf","collections.arrays.contains","collections.arrays.remove","collections.arrays.frequency","collections.arrays.equals","collections.arrays.copy","collections.arrays.swap","collections.arrays.toString","collections.arrays.forEach","collections.LinkedList","collections.LinkedList.constructor","collections.LinkedList.add","collections.LinkedList.first","collections.LinkedList.last","collections.LinkedList.elementAtIndex","collections.LinkedList.indexOf","collections.LinkedList.contains","collections.LinkedList.remove","collections.LinkedList.clear","collections.LinkedList.equals","collections.LinkedList.equalsAux","collections.LinkedList.removeElementAtIndex","collections.LinkedList.forEach","collections.LinkedList.reverse","collections.LinkedList.toArray","collections.LinkedList.size","collections.LinkedList.isEmpty","collections.LinkedList.toString","collections.LinkedList.nodeAtIndex","collections.LinkedList.createNode","collections.Dictionary","collections.Dictionary.constructor","collections.Dictionary.getValue","collections.Dictionary.setValue","collections.Dictionary.remove","collections.Dictionary.keys","collections.Dictionary.values","collections.Dictionary.forEach","collections.Dictionary.containsKey","collections.Dictionary.clear","collections.Dictionary.size","collections.Dictionary.isEmpty","collections.Dictionary.toString","collections.LinkedDictionaryPair","collections.LinkedDictionaryPair.constructor","collections.LinkedDictionaryPair.unlink","collections.LinkedDictionary","collections.LinkedDictionary.constructor","collections.LinkedDictionary.appendToTail","collections.LinkedDictionary.getLinkedDictionaryPair","collections.LinkedDictionary.getValue","collections.LinkedDictionary.remove","collections.LinkedDictionary.clear","collections.LinkedDictionary.replace","collections.LinkedDictionary.setValue","collections.LinkedDictionary.keys","collections.LinkedDictionary.values","collections.LinkedDictionary.forEach","collections.MultiDictionary","collections.MultiDictionary.constructor","collections.MultiDictionary.getValue","collections.MultiDictionary.setValue","collections.MultiDictionary.remove","collections.MultiDictionary.keys","collections.MultiDictionary.values","collections.MultiDictionary.containsKey","collections.MultiDictionary.clear","collections.MultiDictionary.size","collections.MultiDictionary.isEmpty","collections.Heap","collections.Heap.constructor","collections.Heap.leftChildIndex","collections.Heap.rightChildIndex","collections.Heap.parentIndex","collections.Heap.minIndex","collections.Heap.siftUp","collections.Heap.siftDown","collections.Heap.peek","collections.Heap.add","collections.Heap.removeRoot","collections.Heap.contains","collections.Heap.size","collections.Heap.isEmpty","collections.Heap.clear","collections.Heap.forEach","collections.Stack","collections.Stack.constructor","collections.Stack.push","collections.Stack.add","collections.Stack.pop","collections.Stack.peek","collections.Stack.size","collections.Stack.contains","collections.Stack.isEmpty","collections.Stack.clear","collections.Stack.forEach","collections.Queue","collections.Queue.constructor","collections.Queue.enqueue","collections.Queue.add","collections.Queue.dequeue","collections.Queue.peek","collections.Queue.size","collections.Queue.contains","collections.Queue.isEmpty","collections.Queue.clear","collections.Queue.forEach","collections.PriorityQueue","collections.PriorityQueue.constructor","collections.PriorityQueue.enqueue","collections.PriorityQueue.add","collections.PriorityQueue.dequeue","collections.PriorityQueue.peek","collections.PriorityQueue.contains","collections.PriorityQueue.isEmpty","collections.PriorityQueue.size","collections.PriorityQueue.clear","collections.PriorityQueue.forEach","collections.Set","collections.Set.constructor","collections.Set.contains","collections.Set.add","collections.Set.intersection","collections.Set.union","collections.Set.difference","collections.Set.isSubsetOf","collections.Set.remove","collections.Set.forEach","collections.Set.toArray","collections.Set.isEmpty","collections.Set.size","collections.Set.clear","collections.Set.toString","collections.Bag","collections.Bag.constructor","collections.Bag.add","collections.Bag.count","collections.Bag.contains","collections.Bag.remove","collections.Bag.toArray","collections.Bag.toSet","collections.Bag.forEach","collections.Bag.size","collections.Bag.isEmpty","collections.Bag.clear","collections.BSTree","collections.BSTree.constructor","collections.BSTree.add","collections.BSTree.clear","collections.BSTree.isEmpty","collections.BSTree.size","collections.BSTree.contains","collections.BSTree.remove","collections.BSTree.inorderTraversal","collections.BSTree.preorderTraversal","collections.BSTree.postorderTraversal","collections.BSTree.levelTraversal","collections.BSTree.minimum","collections.BSTree.maximum","collections.BSTree.forEach","collections.BSTree.toArray","collections.BSTree.height","collections.BSTree.searchNode","collections.BSTree.transplant","collections.BSTree.removeNode","collections.BSTree.inorderTraversalAux","collections.BSTree.levelTraversalAux","collections.BSTree.preorderTraversalAux","collections.BSTree.postorderTraversalAux","collections.BSTree.minimumAux","collections.BSTree.maximumAux","collections.BSTree.heightAux","collections.BSTree.insertNode","collections.BSTree.createNode","KeyboardState","KeyboardState.constructor","KeyboardState.keyName","KeyboardState.onKeyUp","KeyboardState.onKeyDown","KeyboardState.update","KeyboardState.down","KeyboardState.pressed","KeyboardState.up","RunningElderly","RunningElderly.REScene","RunningElderly.REScene.constructor","RunningElderly.REScene.getObjectById","RunningElderly.REScene.removeObjectById","RunningElderly.RoadManager","RunningElderly.RoadManager.constructor","RunningElderly.RoadSegment","RunningElderly.RoadSegment.constructor","RunningElderly.RoadTrack","RunningElderly.RoadTrack.constructor","RunningElderly.RoadTrack.addObstacle","RunningElderly.RoadTrack.addObstacles","RunningElderly.RoadTrack.removeObstacle","RunningElderly.RoadTrackLeft","RunningElderly.RoadTrackLeft.constructor","RunningElderly.RoadTrackMiddle","RunningElderly.RoadTrackMiddle.constructor","RunningElderly.RoadTrackRight","RunningElderly.RoadTrackRight.constructor","RunningElderly.RoadSurface","RunningElderly.RoadSurface.constructor","RunningElderly.RoadObstacle","RunningElderly.RoadObstacle.constructor","RunningElderly.CharacterManager","RunningElderly.CharacterManager.constructor","RunningElderly.Character","RunningElderly.Character.constructor","RunningElderly.Game","RunningElderly.Game.constructor","RunningElderly.Game.bindTo","RunningElderly.Game.start","RunningElderly.Game.render"],"mappings":"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AGA,IAAIA,CAACA,KAAKA,CAACA,GAAGA,CAACA,CAACA,CAACA;YACpEA,EAAEA,CAACA,CAACA,WAAWA,CAACA,WAAWA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAChCA,MAAMA,CAACA,SAASA,CAACA;YACrBA,CAACA;YACDA,MAAMA,CAACA,IAAIA,CAACA,KAAKA,CAACA;QACtBA,CAACA;QAaDF,6BAAQA,GAARA,UAASA,GAAMA,EAAEA,KAAQA;YAErBG,EAAEA,CAACA,CAACA,WAAWA,CAACA,WAAWA,CAACA,GAAGA,CAACA,IAAIA,WAAWA,CAACA,WAAWA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA;gBACjEA,MAAMA,CAACA,SAASA,CAACA;YACrBA,CAACA;YAEDA,IAAIA,GAAMA,CAACA;YACXA,IAAIA,CAACA,GAAGA,GAAGA,GAAGA,IAAIA,CAACA,KAAKA,CAACA,GAAGA,CAACA,CAACA;YAC9BA,IAAIA,eAAeA,GAA0BA,IAAIA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA;YAC3DA,EAAEA,CAACA,CAACA,WAAWA,CAACA,WAAWA,CAACA,eAAeA,CAACA,CAACA,CAACA,CAACA;gBAC3CA,IAAIA,CAACA,SAASA,EAAEA,CAACA;gBACjBA,GAAGA,GAAGA,SAASA,CAACA;YACpBA,CAACA;YAACA,IAAIA,CAACA,CAACA;gBACJA,GAAGA,GAAGA,eAAeA,CAACA,KAAKA,CAACA;YAChCA,CAACA;YACDA,IAAIA,CAACA,KAAKA,CAACA,CAACA,CAACA,GAAGA;gBACZA,GAAGA,EAAEA,GAAGA;gBACRA,KAAKA,EAAEA,KAAKA;aACfA,CAACA;YACFA,MAAMA,CAACA,GAAGA,CAACA;QACfA,CAACA;QASDH,2BAAMA,GAANA,UAAOA,GAAMA;YACTI,IAAIA,CAACA,GAAGA,GAAGA,GAAGA,IAAIA,CAACA,KAAKA,CAACA,GAAGA,CAACA,CAACA;YAC9BA,IAAIA,eAAeA,GAA0BA,IAAIA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA;YAC3DA,EAAEA,CAACA,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MA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA,SAASA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA;QAC3CA,CAACA;QASOJ,uBAAQA,GAAhBA,UAAiBA,SAAiBA,EAAEA,UAAkBA;YAElDK,EAAEA,CAACA,CAACA,UAAUA,IAAIA,IAAIA,CAACA,IAAIA,CAACA,MAAMA,CAACA,CAACA,CAACA;gBACjCA,EAAEA,CAACA,CAACA,SAASA,IAAIA,IAAIA,CAACA,IAAIA,CAACA,MAAMA,CAACA,CAACA,CAACA;oBAChCA,MAAMA,CAACA,CAACA,CAACA,CAACA;gBACdA,CAACA;gBAACA,IAAIA,CAACA,CAACA;oBACJA,MAAMA,CAACA,SAASA,CAACA;gBACrBA,CAACA;YACLA,CAACA;YAACA,IAAIA,CAACA,CAACA;gBACJA,EAAEA,CAACA,CAACA,IAAIA,CAACA,OAAOA,CAACA,IAAIA,CAACA,IAAIA,CAACA,SAASA,CAACA,EAAEA,IAAIA,CAACA,IAAIA,CAACA,UAAUA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;oBACjEA,MAAMA,CAACA,SAASA,CAACA;gBACrBA,CAACA;gBAACA,IAAIA,CAACA,CAACA;oBACJA,MAAMA,CAACA,UAAUA,CAACA;gBACtBA,CAACA;YACLA,CAACA;QACLA,CAACA;QAMOL,qBAAMA,GAAdA,UAAeA,KAAaA;YAExBM,IAAIA,MAAMA,GAAGA,IAAIA,CAACA,WAAWA,CAACA,KAAKA,CAACA,CAACA;YACrCA,OAAOA,KAAKA,GAAGA,CAACA,IAAIA,IAAIA,CAACA,OAAOA,CAACA,IAAIA,CAACA,IAAIA,CAACA,MAAMA,CAACA,EAAEA,IAAIA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA,GAAGA,CAACA,EAAEA,CAACA;gBACxEA,WAAWA,CAACA,MAAMA,CAACA,IAAIA,CAACA,IAAIA,CAACA,IAAIA,EAAEA,MAAMA,EAAEA,KAAKA,CAACA,CAACA;gBAClDA,KAAKA,GAAGA,MAAMA,CAACA;gBACfA,MAAMA,GAAGA,IAAIA,CAACA,WAAWA,CAACA,KAAKA,CAACA,CAACA;YACrCA,CAACA;QACLA,CAACA;QAMON,uBAAQA,GAAhBA,UAAiBA,SAAiBA;YAG9BO,IAAIA,GAAGA,GAAGA,IAAIA,CAACA,QAAQA,CAACA,IAAIA,CAACA,cAAcA,CAACA,SAASA,CAACA,EAClDA,IAAIA,CAACA,eAAeA,CAACA,SAASA,CAACA,CAACA,CAACA;YAErCA,OAAOA,GAAGA,IAAIA,CAACA,IAAIA,IAAIA,CAACA,OAAOA,CAACA,IAAIA,CAACA,IAAIA,CAACA,SAASA,CAACA,EAChDA,IAAIA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,EAAEA,CAACA;gBACtBA,WAAWA,CAACA,MAAMA,CAACA,IAAIA,CAACA,IAAIA,CAACA,IAAIA,EAAEA,GAAGA,EAAEA,SAASA,CAACA,CAACA;gBACnDA,SAASA,GAAGA,GAAGA,CAACA;gBAChBA,GAAGA,GAAGA,IAAIA,CAACA,QAAQA,CAACA,IAAIA,CAACA,cAAcA,CAACA,SAASA,CAACA,EAC9CA,IAAIA,CAACA,eAAeA,CAACA,SAASA,CAACA,CAACA,CAACA;YACzCA,CAACA;QACLA,CAACA;QAMDP,mBAAIA,GAAJA;YAEIQ,EAAEA,CAACA,CAACA,IAAIA,CAACA,IAAIA,CAACA,MAAMA,GAAGA,CAACA,CAACA,CAACA,CAACA;gBACvBA,MAAMA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;YACxBA,CAACA;YAACA,IAAIA,CAACA,CAACA;gBACJA,MAAMA,CAACA,SAASA,CAACA;YACrBA,CAACA;QACLA,CAACA;QAMDR,kBAAGA,GAAHA,UAAIA,OAAUA;YACVS,EAAEA,CAACA,CAACA,WAAWA,CAACA,WAAWA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA;gBACnCA,MAAMA,CAACA,SAASA,CAACA;YACrBA,CAACA;YACDA,IAAIA,CAACA,IAAIA,CAACA,IAAIA,CAACA,OAAOA,CAACA,CAACA;YACxBA,IAAIA,CAACA,MAAMA,CAACA,IA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","file":"app.min.js","sourcesContent":["// Copyright 2013 Basarat Ali Syed. All Rights Reserved.\r\n//\r\n// Licensed under MIT open source license http://opensource.org/licenses/MIT\r\n//\r\n// Orginal javascript code was by Mauricio Santos\r\n\r\n/**\r\n * @namespace Top level namespace for collections, a TypeScript data structure library.\r\n */\r\nmodule collections {\r\n    \r\n    var _hasOwnProperty = Object.prototype.hasOwnProperty;\r\n    var has = function(obj, prop) {\r\n        return _hasOwnProperty.call(obj, prop);\r\n    }\r\n\r\n    /**\r\n    * Function signature for comparing\r\n    * <0 means a is smaller\r\n    * = 0 means they are equal\r\n    * >0 means a is larger\r\n    */\r\n    export interface ICompareFunction<T>{\r\n        (a: T, b: T): number;\r\n    }\r\n\r\n    /**\r\n    * Function signature for checking equality\r\n    */\r\n    export interface IEqualsFunction<T>{\r\n        (a: T, b: T): boolean;\r\n    }\r\n\r\n    /**\r\n    * Function signature for Iterations. Return false to break from loop\r\n    */\r\n    export interface ILoopFunction<T>{\r\n        (a: T): boolean;\r\n    }\r\n\r\n    /**\r\n     * Default function to compare element order.\r\n     * @function     \r\n     */\r\n    export function defaultCompare<T>(a: T, b: T): number {\r\n        if (a < b) {\r\n            return -1;\r\n        } else if (a === b) {\r\n            return 0;\r\n        } else {\r\n            return 1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Default function to test equality. \r\n     * @function     \r\n     */\r\n    export function defaultEquals<T>(a: T, b: T): boolean {\r\n        return a === b;\r\n    }\r\n\r\n    /**\r\n     * Default function to convert an object to a string.\r\n     * @function     \r\n     */\r\n    export function defaultToString(item: any): string {\r\n        if (item === null) {\r\n            return 'COLLECTION_NULL';\r\n        } else if (collections.isUndefined(item)) {\r\n            return 'COLLECTION_UNDEFINED';\r\n        } else if (collections.isString(item)) {\r\n            return '$s' + item;\r\n        } else {\r\n            return '$o' + item.toString();\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Joins all the properies of the object using the provided join string \r\n    */\r\n    export function makeString<T>(item: T, join: string = \",\"): string {\r\n        if (item === null) {\r\n            return 'COLLECTION_NULL';\r\n        } else if (collections.isUndefined(item)) {\r\n            return 'COLLECTION_UNDEFINED';\r\n        } else if (collections.isString(item)) {\r\n            return item.toString();\r\n        } else {\r\n            var toret = \"{\";\r\n            var first = true;\r\n            for (var prop in item) {\r\n                if (has(item, prop)) {\r\n                    if (first)\r\n                        first = false;\r\n                    else\r\n                        toret = toret + join;\r\n                    toret = toret + prop + \":\" + item[prop];\r\n                }\r\n            }\r\n            return toret + \"}\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if the given argument is a function.\r\n     * @function     \r\n     */\r\n    export function isFunction(func: any): boolean {\r\n        return (typeof func) === 'function';\r\n    }\r\n\r\n    /**\r\n     * Checks if the given argument is undefined.\r\n     * @function\r\n     */\r\n    export function isUndefined(obj: any): boolean {\r\n        return (typeof obj) === 'undefined';\r\n    }\r\n\r\n    /**\r\n     * Checks if the given argument is a string.\r\n     * @function\r\n     */\r\n    export function isString(obj: any): boolean {\r\n        return Object.prototype.toString.call(obj) === '[object String]';\r\n    }\r\n\r\n    /**\r\n     * Reverses a compare function.\r\n     * @function\r\n     */\r\n    export function reverseCompareFunction<T>(compareFunction: ICompareFunction<T>): ICompareFunction<T> {\r\n        if (!collections.isFunction(compareFunction)) {\r\n            return function (a, b) {\r\n                if (a < b) {\r\n                    return 1;\r\n                } else if (a === b) {\r\n                    return 0;\r\n                } else {\r\n                    return -1;\r\n                }\r\n            };\r\n        } else {\r\n            return function (d: T, v: T) {\r\n                return compareFunction(d, v) * -1;\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns an equal function given a compare function.\r\n     * @function\r\n     */\r\n    export function compareToEquals<T>(compareFunction: ICompareFunction<T>): IEqualsFunction<T> {\r\n        return function (a: T, b: T) {\r\n            return compareFunction(a, b) === 0;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @namespace Contains various functions for manipulating arrays.\r\n     */\r\n    export module arrays {\r\n\r\n        /**\r\n         * Returns the position of the first occurrence of the specified item\r\n         * within the specified array.\r\n         * @param {*} array the array in which to search the element.\r\n         * @param {Object} item the element to search.\r\n         * @param {function(Object,Object):boolean=} equalsFunction optional function used to \r\n         * check equality between 2 elements.\r\n         * @return {number} the position of the first occurrence of the specified element\r\n         * within the specified array, or -1 if not found.\r\n         */\r\n        export function indexOf<T>(array: T[], item: T, equalsFunction?: collections.IEqualsFunction<T>): number {\r\n            var equals = equalsFunction || collections.defaultEquals;\r\n            var length = array.length;\r\n            for (var i = 0; i < length; i++) {\r\n                if (equals(array[i], item)) {\r\n                    return i;\r\n                }\r\n            }\r\n            return -1;\r\n        }\r\n\r\n        /**\r\n         * Returns the position of the last occurrence of the specified element\r\n         * within the specified array.\r\n         * @param {*} array the array in which to search the element.\r\n         * @param {Object} item the element to search.\r\n         * @param {function(Object,Object):boolean=} equalsFunction optional function used to \r\n         * check equality between 2 elements.\r\n         * @return {number} the position of the last occurrence of the specified element\r\n         * within the specified array or -1 if not found.\r\n         */\r\n        export function lastIndexOf<T>(array: T[], item: T, equalsFunction?: collections.IEqualsFunction<T>): number {\r\n            var equals = equalsFunction || collections.defaultEquals;\r\n            var length = array.length;\r\n            for (var i = length - 1; i >= 0; i--) {\r\n                if (equals(array[i], item)) {\r\n                    return i;\r\n                }\r\n            }\r\n            return -1;\r\n        }\r\n\r\n        /**\r\n         * Returns true if the specified array contains the specified element.\r\n         * @param {*} array the array in which to search the element.\r\n         * @param {Object} item the element to search.\r\n         * @param {function(Object,Object):boolean=} equalsFunction optional function to \r\n         * check equality between 2 elements.\r\n         * @return {boolean} true if the specified array contains the specified element.\r\n         */\r\n        export function contains<T>(array: T[], item: T, equalsFunction?: collections.IEqualsFunction<T>): boolean {\r\n            return arrays.indexOf(array, item, equalsFunction) >= 0;\r\n        }\r\n\r\n\r\n        /**\r\n         * Removes the first ocurrence of the specified element from the specified array.\r\n         * @param {*} array the array in which to search element.\r\n         * @param {Object} item the element to search.\r\n         * @param {function(Object,Object):boolean=} equalsFunction optional function to \r\n         * check equality between 2 elements.\r\n         * @return {boolean} true if the array changed after this call.\r\n         */\r\n        export function remove<T>(array: T[], item: T, equalsFunction?: collections.IEqualsFunction<T>): boolean {\r\n            var index = arrays.indexOf(array, item, equalsFunction);\r\n            if (index < 0) {\r\n                return false;\r\n            }\r\n            array.splice(index, 1);\r\n            return true;\r\n        }\r\n\r\n        /**\r\n         * Returns the number of elements in the specified array equal\r\n         * to the specified object.\r\n         * @param {Array} array the array in which to determine the frequency of the element.\r\n         * @param {Object} item the element whose frequency is to be determined.\r\n         * @param {function(Object,Object):boolean=} equalsFunction optional function used to \r\n         * check equality between 2 elements.\r\n         * @return {number} the number of elements in the specified array \r\n         * equal to the specified object.\r\n         */\r\n        export function frequency<T>(array: T[], item: T, equalsFunction?: collections.IEqualsFunction<T>): number {\r\n            var equals = equalsFunction || collections.defaultEquals;\r\n            var length = array.length;\r\n            var freq = 0;\r\n            for (var i = 0; i < length; i++) {\r\n                if (equals(array[i], item)) {\r\n                    freq++;\r\n                }\r\n            }\r\n            return freq;\r\n        }\r\n\r\n        /**\r\n         * Returns true if the two specified arrays are equal to one another.\r\n         * Two arrays are considered equal if both arrays contain the same number\r\n         * of elements, and all corresponding pairs of elements in the two \r\n         * arrays are equal and are in the same order. \r\n         * @param {Array} array1 one array to be tested for equality.\r\n         * @param {Array} array2 the other array to be tested for equality.\r\n         * @param {function(Object,Object):boolean=} equalsFunction optional function used to \r\n         * check equality between elemements in the arrays.\r\n         * @return {boolean} true if the two arrays are equal\r\n         */\r\n        export function equals<T>(array1: T[], array2: T[], equalsFunction?: collections.IEqualsFunction<T>): boolean {\r\n            var equals = equalsFunction || collections.defaultEquals;\r\n\r\n            if (array1.length !== array2.length) {\r\n                return false;\r\n            }\r\n            var length = array1.length;\r\n            for (var i = 0; i < length; i++) {\r\n                if (!equals(array1[i], array2[i])) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n\r\n        /**\r\n         * Returns shallow a copy of the specified array.\r\n         * @param {*} array the array to copy.\r\n         * @return {Array} a copy of the specified array\r\n         */\r\n        export function copy<T>(array: T[]): T[] {\r\n            return array.concat();\r\n        }\r\n\r\n        /**\r\n         * Swaps the elements at the specified positions in the specified array.\r\n         * @param {Array} array The array in which to swap elements.\r\n         * @param {number} i the index of one element to be swapped.\r\n         * @param {number} j the index of the other element to be swapped.\r\n         * @return {boolean} true if the array is defined and the indexes are valid.\r\n         */\r\n        export function swap<T>(array: T[], i: number, j: number): boolean {\r\n            if (i < 0 || i >= array.length || j < 0 || j >= array.length) {\r\n                return false;\r\n            }\r\n            var temp = array[i];\r\n            array[i] = array[j];\r\n            array[j] = temp;\r\n            return true;\r\n        }\r\n\r\n        export function toString<T>(array: T[]): string {\r\n            return '[' + array.toString() + ']';\r\n        }\r\n\r\n        /**\r\n         * Executes the provided function once for each element present in this array \r\n         * starting from index 0 to length - 1.\r\n         * @param {Array} array The array in which to iterate.\r\n         * @param {function(Object):*} callback function to execute, it is\r\n         * invoked with one argument: the element value, to break the iteration you can \r\n         * optionally return false.\r\n         */\r\n        export function forEach<T>(array: T[], callback: (item: T) => boolean): void {\r\n            var lenght = array.length;\r\n            for (var i = 0; i < lenght; i++) {\r\n                if (callback(array[i]) === false) {\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    // A linked list node\r\n    export interface ILinkedListNode<T>{\r\n        element: T;\r\n        next: ILinkedListNode<T>;\r\n    }\r\n\r\n    export class LinkedList<T> {\r\n\r\n        /**\r\n        * First node in the list\r\n        * @type {Object}\r\n        * @private\r\n        */\r\n        public firstNode: ILinkedListNode<T> = null;\r\n        /**\r\n        * Last node in the list\r\n        * @type {Object}\r\n        * @private\r\n        */\r\n        private lastNode: ILinkedListNode<T> = null;\r\n\r\n        /**\r\n        * Number of elements in the list\r\n        * @type {number}\r\n        * @private\r\n        */\r\n        private nElements = 0;\r\n\r\n        /**\r\n        * Creates an empty Linked List.\r\n        * @class A linked list is a data structure consisting of a group of nodes\r\n        * which together represent a sequence.\r\n        * @constructor\r\n        */\r\n        constructor() {\r\n        }\r\n\r\n        /**\r\n        * Adds an element to this list.\r\n        * @param {Object} item element to be added.\r\n        * @param {number=} index optional index to add the element. If no index is specified\r\n        * the element is added to the end of this list.\r\n        * @return {boolean} true if the element was added or false if the index is invalid\r\n        * or if the element is undefined.\r\n        */\r\n        add(item: T, index?: number): boolean {\r\n            if (collections.isUndefined(index)) {\r\n                index = this.nElements;\r\n            }\r\n            if (index < 0 || index > this.nElements || collections.isUndefined(item)) {\r\n                return false;\r\n            }\r\n            var newNode = this.createNode(item);\r\n            if (this.nElements === 0) {\r\n                // First node in the list.\r\n                this.firstNode = newNode;\r\n                this.lastNode = newNode;\r\n            } else if (index === this.nElements) {\r\n                // Insert at the end.\r\n                this.lastNode.next = newNode;\r\n                this.lastNode = newNode;\r\n            } else if (index === 0) {\r\n                // Change first node.\r\n                newNode.next = this.firstNode;\r\n                this.firstNode = newNode;\r\n            } else {\r\n                var prev = this.nodeAtIndex(index - 1);\r\n                newNode.next = prev.next;\r\n                prev.next = newNode;\r\n            }\r\n            this.nElements++;\r\n            return true;\r\n        }\r\n\r\n        /**\r\n        * Returns the first element in this list.\r\n        * @return {*} the first element of the list or undefined if the list is\r\n        * empty.\r\n        */\r\n        first(): T {\r\n\r\n            if (this.firstNode !== null) {\r\n                return this.firstNode.element;\r\n            }\r\n            return undefined;\r\n        }\r\n\r\n        /**\r\n        * Returns the last element in this list.\r\n        * @return {*} the last element in the list or undefined if the list is\r\n        * empty.\r\n        */\r\n        last(): T {\r\n\r\n            if (this.lastNode !== null) {\r\n                return this.lastNode.element;\r\n            }\r\n            return undefined;\r\n        }\r\n\r\n        /**\r\n         * Returns the element at the specified position in this list.\r\n         * @param {number} index desired index.\r\n         * @return {*} the element at the given index or undefined if the index is\r\n         * out of bounds.\r\n         */\r\n        elementAtIndex(index: number): T {\r\n\r\n            var node = this.nodeAtIndex(index);\r\n            if (node === null) {\r\n                return undefined;\r\n            }\r\n            return node.element;\r\n        }\r\n\r\n        /**\r\n         * Returns the index in this list of the first occurrence of the\r\n         * specified element, or -1 if the List does not contain this element.\r\n         * <p>If the elements inside this list are\r\n         * not comparable with the === operator a custom equals function should be\r\n         * provided to perform searches, the function must receive two arguments and\r\n         * return true if they are equal, false otherwise. Example:</p>\r\n         *\r\n         * <pre>\r\n         * var petsAreEqualByName = function(pet1, pet2) {\r\n         *  return pet1.name === pet2.name;\r\n         * }\r\n         * </pre>\r\n         * @param {Object} item element to search for.\r\n         * @param {function(Object,Object):boolean=} equalsFunction Optional\r\n         * function used to check if two elements are equal.\r\n         * @return {number} the index in this list of the first occurrence\r\n         * of the specified element, or -1 if this list does not contain the\r\n         * element.\r\n         */\r\n        indexOf(item: T, equalsFunction?: IEqualsFunction<T>): number {\r\n\r\n            var equalsF = equalsFunction || collections.defaultEquals;\r\n            if (collections.isUndefined(item)) {\r\n                return -1;\r\n            }\r\n            var currentNode = this.firstNode;\r\n            var index = 0;\r\n            while (currentNode !== null) {\r\n                if (equalsF(currentNode.element, item)) {\r\n                    return index;\r\n                }\r\n                index++;\r\n                currentNode = currentNode.next;\r\n            }\r\n            return -1;\r\n        }\r\n\r\n\r\n        /**\r\n           * Returns true if this list contains the specified element.\r\n           * <p>If the elements inside the list are\r\n           * not comparable with the === operator a custom equals function should be\r\n           * provided to perform searches, the function must receive two arguments and\r\n           * return true if they are equal, false otherwise. Example:</p>\r\n           *\r\n           * <pre>\r\n           * var petsAreEqualByName = function(pet1, pet2) {\r\n           *  return pet1.name === pet2.name;\r\n           * }\r\n           * </pre>\r\n           * @param {Object} item element to search for.\r\n           * @param {function(Object,Object):boolean=} equalsFunction Optional\r\n           * function used to check if two elements are equal.\r\n           * @return {boolean} true if this list contains the specified element, false\r\n           * otherwise.\r\n           */\r\n        contains(item: T, equalsFunction?: IEqualsFunction<T>): boolean {\r\n            return (this.indexOf(item, equalsFunction) >= 0);\r\n        }\r\n\r\n        /**\r\n         * Removes the first occurrence of the specified element in this list.\r\n         * <p>If the elements inside the list are\r\n         * not comparable with the === operator a custom equals function should be\r\n         * provided to perform searches, the function must receive two arguments and\r\n         * return true if they are equal, false otherwise. Example:</p>\r\n         *\r\n         * <pre>\r\n         * var petsAreEqualByName = function(pet1, pet2) {\r\n         *  return pet1.name === pet2.name;\r\n         * }\r\n         * </pre>\r\n         * @param {Object} item element to be removed from this list, if present.\r\n         * @return {boolean} true if the list contained the specified element.\r\n         */\r\n        remove(item: T, equalsFunction?: IEqualsFunction<T>): boolean {\r\n            var equalsF = equalsFunction || collections.defaultEquals;\r\n            if (this.nElements < 1 || collections.isUndefined(item)) {\r\n                return false;\r\n            }\r\n            var previous: ILinkedListNode<T> = null;\r\n            var currentNode: ILinkedListNode<T> = this.firstNode;\r\n\r\n            while (currentNode !== null) {\r\n                if (equalsF(currentNode.element, item)) {\r\n\r\n                    if (currentNode === this.firstNode) {\r\n                        this.firstNode = this.firstNode.next;\r\n                        if (currentNode === this.lastNode) {\r\n                            this.lastNode = null;\r\n                        }\r\n                    } else if (currentNode === this.lastNode) {\r\n                        this.lastNode = previous;\r\n                        previous.next = currentNode.next;\r\n                        currentNode.next = null;\r\n                    } else {\r\n                        previous.next = currentNode.next;\r\n                        currentNode.next = null;\r\n                    }\r\n                    this.nElements--;\r\n                    return true;\r\n                }\r\n                previous = currentNode;\r\n                currentNode = currentNode.next;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * Removes all of the elements from this list.\r\n         */\r\n        clear(): void {\r\n            this.firstNode = null;\r\n            this.lastNode = null;\r\n            this.nElements = 0;\r\n        }\r\n\r\n        /**\r\n         * Returns true if this list is equal to the given list.\r\n         * Two lists are equal if they have the same elements in the same order.\r\n         * @param {LinkedList} other the other list.\r\n         * @param {function(Object,Object):boolean=} equalsFunction optional\r\n         * function used to check if two elements are equal. If the elements in the lists\r\n         * are custom objects you should provide a function, otherwise \r\n         * the === operator is used to check equality between elements.\r\n         * @return {boolean} true if this list is equal to the given list.\r\n         */\r\n        equals(other: LinkedList<T>, equalsFunction?: IEqualsFunction<T>): boolean {\r\n            var eqF = equalsFunction || collections.defaultEquals;\r\n            if (!(other instanceof collections.LinkedList)) {\r\n                return false;\r\n            }\r\n            if (this.size() !== other.size()) {\r\n                return false;\r\n            }\r\n            return this.equalsAux(this.firstNode, other.firstNode, eqF);\r\n        }\r\n\r\n        /**\r\n        * @private\r\n        */\r\n        private equalsAux(n1: ILinkedListNode<T>, n2: ILinkedListNode<T>, eqF: IEqualsFunction<T>): boolean {\r\n            while (n1 !== null) {\r\n                if (!eqF(n1.element, n2.element)) {\r\n                    return false;\r\n                }\r\n                n1 = n1.next;\r\n                n2 = n2.next;\r\n            }\r\n            return true;\r\n        }\r\n\r\n        /**\r\n         * Removes the element at the specified position in this list.\r\n         * @param {number} index given index.\r\n         * @return {*} removed element or undefined if the index is out of bounds.\r\n         */\r\n        removeElementAtIndex(index: number): T {\r\n            if (index < 0 || index >= this.nElements) {\r\n                return undefined;\r\n            }\r\n            var element: T;\r\n            if (this.nElements === 1) {\r\n                //First node in the list.\r\n                element = this.firstNode.element;\r\n                this.firstNode = null;\r\n                this.lastNode = null;\r\n            } else {\r\n                var previous = this.nodeAtIndex(index - 1);\r\n                if (previous === null) {\r\n                    element = this.firstNode.element;\r\n                    this.firstNode = this.firstNode.next;\r\n                } else if (previous.next === this.lastNode) {\r\n                    element = this.lastNode.element;\r\n                    this.lastNode = previous;\r\n                }\r\n                if (previous !== null) {\r\n                    element = previous.next.element;\r\n                    previous.next = previous.next.next;\r\n                }\r\n            }\r\n            this.nElements--;\r\n            return element;\r\n        }\r\n\r\n        /**\r\n         * Executes the provided function once for each element present in this list in order.\r\n         * @param {function(Object):*} callback function to execute, it is\r\n         * invoked with one argument: the element value, to break the iteration you can \r\n         * optionally return false.\r\n         */\r\n        forEach(callback: (item: T) => boolean): void {\r\n            var currentNode = this.firstNode;\r\n            while (currentNode !== null) {\r\n                if (callback(currentNode.element) === false) {\r\n                    break;\r\n                }\r\n                currentNode = currentNode.next;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Reverses the order of the elements in this linked list (makes the last \r\n         * element first, and the first element last).\r\n         */\r\n        reverse(): void {\r\n            var previous: ILinkedListNode<T> = null;\r\n            var current: ILinkedListNode<T> = this.firstNode;\r\n            var temp: ILinkedListNode<T> = null;\r\n            while (current !== null) {\r\n                temp = current.next;\r\n                current.next = previous;\r\n                previous = current;\r\n                current = temp;\r\n            }\r\n            temp = this.firstNode;\r\n            this.firstNode = this.lastNode;\r\n            this.lastNode = temp;\r\n        }\r\n\r\n        /**\r\n         * Returns an array containing all of the elements in this list in proper\r\n         * sequence.\r\n         * @return {Array.<*>} an array containing all of the elements in this list,\r\n         * in proper sequence.\r\n         */\r\n        toArray(): T[] {\r\n            var array: T[] = [];\r\n            var currentNode: ILinkedListNode<T> = this.firstNode;\r\n            while (currentNode !== null) {\r\n                array.push(currentNode.element);\r\n                currentNode = currentNode.next;\r\n            }\r\n            return array;\r\n        }\r\n\r\n        /**\r\n         * Returns the number of elements in this list.\r\n         * @return {number} the number of elements in this list.\r\n         */\r\n        size(): number {\r\n            return this.nElements;\r\n        }\r\n\r\n        /**\r\n         * Returns true if this list contains no elements.\r\n         * @return {boolean} true if this list contains no elements.\r\n         */\r\n        isEmpty(): boolean {\r\n            return this.nElements <= 0;\r\n        }\r\n\r\n        toString(): string {\r\n            return collections.arrays.toString(this.toArray());\r\n        }\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        private nodeAtIndex(index: number): ILinkedListNode<T> {\r\n\r\n            if (index < 0 || index >= this.nElements) {\r\n                return null;\r\n            }\r\n            if (index === (this.nElements - 1)) {\r\n                return this.lastNode;\r\n            }\r\n            var node = this.firstNode;\r\n            for (var i = 0; i < index; i++) {\r\n                node = node.next;\r\n            }\r\n            return node;\r\n        }\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        private createNode(item: T): ILinkedListNode<T> {\r\n            return {\r\n                element: item,\r\n                next: null\r\n            };\r\n        }\r\n    } // End of linked list \r\n\r\n\r\n\r\n    // Used internally by dictionary \r\n    export interface IDictionaryPair<K, V>{\r\n        key: K;\r\n        value: V;\r\n    }\r\n\r\n    export class Dictionary<K, V>{\r\n\r\n        /**\r\n         * Object holding the key-value pairs.\r\n         * @type {Object}\r\n         * @private\r\n         */\r\n        protected table: { [key: string]: IDictionaryPair<K, V> };\r\n        //: [key: K] will not work since indices can only by strings in javascript and typescript enforces this. \r\n\r\n        /**\r\n         * Number of elements in the list.\r\n         * @type {number}\r\n         * @private\r\n         */\r\n        protected nElements: number;\r\n\r\n        /**\r\n         * Function used to convert keys to strings.\r\n         * @type {function(Object):string}\r\n         * @protected\r\n         */\r\n        protected toStr: (key: K) => string;\r\n\r\n\r\n        /**\r\n         * Creates an empty dictionary. \r\n         * @class <p>Dictionaries map keys to values; each key can map to at most one value.\r\n         * This implementation accepts any kind of objects as keys.</p>\r\n         *\r\n         * <p>If the keys are custom objects a function which converts keys to unique\r\n         * strings must be provided. Example:</p>\r\n         * <pre>\r\n         * function petToString(pet) {\r\n         *  return pet.name;\r\n         * }\r\n         * </pre>\r\n         * @constructor\r\n         * @param {function(Object):string=} toStrFunction optional function used\r\n         * to convert keys to strings. If the keys aren't strings or if toString()\r\n         * is not appropriate, a custom function which receives a key and returns a\r\n         * unique string must be provided.\r\n         */\r\n        constructor(toStrFunction?: (key: K) => string) {\r\n            this.table = {};\r\n            this.nElements = 0;\r\n            this.toStr = toStrFunction || collections.defaultToString;\r\n        }\r\n\r\n\r\n        /**\r\n         * Returns the value to which this dictionary maps the specified key.\r\n         * Returns undefined if this dictionary contains no mapping for this key.\r\n         * @param {Object} key key whose associated value is to be returned.\r\n         * @return {*} the value to which this dictionary maps the specified key or\r\n         * undefined if the map contains no mapping for this key.\r\n         */\r\n        getValue(key: K): V {\r\n            var pair: IDictionaryPair<K, V> = this.table['$' + this.toStr(key)];\r\n            if (collections.isUndefined(pair)) {\r\n                return undefined;\r\n            }\r\n            return pair.value;\r\n        }\r\n\r\n\r\n        /**\r\n         * Associates the specified value with the specified key in this dictionary.\r\n         * If the dictionary previously contained a mapping for this key, the old\r\n         * value is replaced by the specified value.\r\n         * @param {Object} key key with which the specified value is to be\r\n         * associated.\r\n         * @param {Object} value value to be associated with the specified key.\r\n         * @return {*} previous value associated with the specified key, or undefined if\r\n         * there was no mapping for the key or if the key/value are undefined.\r\n         */\r\n        setValue(key: K, value: V): V {\r\n\r\n            if (collections.isUndefined(key) || collections.isUndefined(value)) {\r\n                return undefined;\r\n            }\r\n\r\n            var ret: V;\r\n            var k = '$' + this.toStr(key);\r\n            var previousElement: IDictionaryPair<K, V> = this.table[k];\r\n            if (collections.isUndefined(previousElement)) {\r\n                this.nElements++;\r\n                ret = undefined;\r\n            } else {\r\n                ret = previousElement.value;\r\n            }\r\n            this.table[k] = {\r\n                key: key,\r\n                value: value\r\n            };\r\n            return ret;\r\n        }\r\n\r\n        /**\r\n         * Removes the mapping for this key from this dictionary if it is present.\r\n         * @param {Object} key key whose mapping is to be removed from the\r\n         * dictionary.\r\n         * @return {*} previous value associated with specified key, or undefined if\r\n         * there was no mapping for key.\r\n         */\r\n        remove(key: K): V {\r\n            var k = '$' + this.toStr(key);\r\n            var previousElement: IDictionaryPair<K, V> = this.table[k];\r\n            if (!collections.isUndefined(previousElement)) {\r\n                delete this.table[k];\r\n                this.nElements--;\r\n                return previousElement.value;\r\n            }\r\n            return undefined;\r\n        }\r\n\r\n        /**\r\n         * Returns an array containing all of the keys in this dictionary.\r\n         * @return {Array} an array containing all of the keys in this dictionary.\r\n         */\r\n        keys(): K[] {\r\n            var array: K[] = [];\r\n            for (var name in this.table) {\r\n                if (has(this.table, name)) {\r\n                    var pair: IDictionaryPair<K, V> = this.table[name];\r\n                    array.push(pair.key);\r\n                }\r\n            }\r\n            return array;\r\n        }\r\n\r\n        /**\r\n         * Returns an array containing all of the values in this dictionary.\r\n         * @return {Array} an array containing all of the values in this dictionary.\r\n         */\r\n        values(): V[] {\r\n            var array: V[] = [];\r\n            for (var name in this.table) {\r\n                if (has(this.table, name)) {\r\n                    var pair: IDictionaryPair<K, V> = this.table[name];\r\n                    array.push(pair.value);\r\n                }\r\n            }\r\n            return array;\r\n        }\r\n\r\n        /**\r\n        * Executes the provided function once for each key-value pair \r\n        * present in this dictionary.\r\n        * @param {function(Object,Object):*} callback function to execute, it is\r\n        * invoked with two arguments: key and value. To break the iteration you can \r\n        * optionally return false.\r\n        */\r\n        forEach(callback: (key: K, value: V) => any): void {\r\n            for (var name in this.table) {\r\n                if (has(this.table, name)) {\r\n                    var pair: IDictionaryPair<K, V> = this.table[name];\r\n                    var ret = callback(pair.key, pair.value);\r\n                    if (ret === false) {\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Returns true if this dictionary contains a mapping for the specified key.\r\n         * @param {Object} key key whose presence in this dictionary is to be\r\n         * tested.\r\n         * @return {boolean} true if this dictionary contains a mapping for the\r\n         * specified key.\r\n         */\r\n        containsKey(key: K): boolean {\r\n            return !collections.isUndefined(this.getValue(key));\r\n        }\r\n\r\n        /**\r\n        * Removes all mappings from this dictionary.\r\n        * @this {collections.Dictionary}\r\n        */\r\n        clear() {\r\n            this.table = {};\r\n            this.nElements = 0;\r\n        }\r\n\r\n        /**\r\n         * Returns the number of keys in this dictionary.\r\n         * @return {number} the number of key-value mappings in this dictionary.\r\n         */\r\n        size(): number {\r\n            return this.nElements;\r\n        }\r\n\r\n        /**\r\n         * Returns true if this dictionary contains no mappings.\r\n         * @return {boolean} true if this dictionary contains no mappings.\r\n         */\r\n        isEmpty(): boolean {\r\n            return this.nElements <= 0;\r\n        }\r\n\r\n        toString(): string {\r\n            var toret = \"{\";\r\n            this.forEach((k, v) => {\r\n                toret = toret + \"\\n\\t\" + k.toString() + \" : \" + v.toString();\r\n            });\r\n            return toret + \"\\n}\";\r\n        }\r\n    } // End of dictionary\r\n\r\n    /**\r\n     * This class is used by the LinkedDictionary Internally\r\n     * Has to be a class, not an interface, because it needs to have \r\n     * the 'unlink' function defined.\r\n     */\r\n    class LinkedDictionaryPair<K, V> implements IDictionaryPair<K, V> {\r\n        prev: LinkedDictionaryPair<K, V>;\r\n        next: LinkedDictionaryPair<K, V>;\r\n\r\n        constructor(public key: K, public value: V) { }\r\n\r\n        unlink() {\r\n            this.prev.next = this.next;\r\n            this.next.prev = this.prev;\r\n        }\r\n    }\r\n\r\n    export class LinkedDictionary<K, V> extends Dictionary<K, V> {\r\n        private head: LinkedDictionaryPair<K, V>; // Head Identifier of the list.  holds no Key or Value\r\n        private tail: LinkedDictionaryPair<K, V>; // Tail Identifier of the list.  holds no Key or Value\r\n\r\n        constructor(toStrFunction?: (key: K) => string) {\r\n            super(toStrFunction);\r\n            this.head = new LinkedDictionaryPair (null, null);\r\n            this.tail = new LinkedDictionaryPair (null, null);\r\n            this.head.next = this.tail;\r\n            this.tail.prev = this.head;\r\n        }\r\n\r\n        /**\r\n         * Inserts the new node to the 'tail' of the list, updating the \r\n         * neighbors, and moving 'this.tail' (the End of List indicator) that\r\n         * to the end.\r\n         */\r\n        private appendToTail(entry: LinkedDictionaryPair<K, V>) {\r\n            var lastNode = this.tail.prev;\r\n            lastNode.next = entry;\r\n            entry.prev = lastNode;\r\n            entry.next = this.tail;\r\n            this.tail.prev = entry;\r\n        }\r\n\r\n        /**\r\n         * Retrieves a linked dictionary from the table internally\r\n         */\r\n        private getLinkedDictionaryPair(key: K): LinkedDictionaryPair<K, V> {\r\n            if (collections.isUndefined(key)) {\r\n                return undefined;\r\n            }\r\n            var k = '$' + this.toStr(key);\r\n            var pair = <LinkedDictionaryPair<K, V>>(this.table[k]);\r\n            return pair;\r\n        }\r\n\r\n        /**\r\n         * Returns the value to which this dictionary maps the specified key.\r\n         * Returns undefined if this dictionary contains no mapping for this key.\r\n         * @param {Object} key key whose associated value is to be returned.\r\n         * @return {*} the value to which this dictionary maps the specified key or\r\n         * undefined if the map contains no mapping for this key.\r\n         */\r\n        getValue(key: K): V {\r\n            var pair = this.getLinkedDictionaryPair(key);\r\n            if (!collections.isUndefined(pair)) {\r\n                return pair.value;\r\n            }\r\n            return undefined;\r\n        }\r\n\r\n        /**\r\n         * Removes the mapping for this key from this dictionary if it is present.\r\n         * Also, if a value is present for this key, the entry is removed from the \r\n         * insertion ordering.\r\n         * @param {Object} key key whose mapping is to be removed from the\r\n         * dictionary.\r\n         * @return {*} previous value associated with specified key, or undefined if\r\n         * there was no mapping for key.\r\n         */\r\n        remove(key: K): V {\r\n            var pair = this.getLinkedDictionaryPair(key);\r\n            if (!collections.isUndefined(pair)) {\r\n                super.remove(key); // This will remove it from the table\r\n                pair.unlink(); // This will unlink it from the chain\r\n                return pair.value;\r\n            }\r\n            return undefined;\r\n        } \r\n\r\n        /**\r\n        * Removes all mappings from this LinkedDictionary.\r\n        * @this {collections.LinkedDictionary}\r\n        */\r\n        clear() {\r\n            super.clear();\r\n            this.head.next = this.tail;\r\n            this.tail.prev = this.head;\r\n        }\r\n\r\n        /**\r\n         * Internal function used when updating an existing KeyValue pair.\r\n         * It places the new value indexed by key into the table, but maintains \r\n         * its place in the linked ordering.\r\n         */\r\n        private replace(oldPair: LinkedDictionaryPair<K, V>, newPair: LinkedDictionaryPair<K, V>) {\r\n            var k = '$' + this.toStr(newPair.key);\r\n\r\n            // set the new Pair's links to existingPair's links\r\n            newPair.next = oldPair.next;\r\n            newPair.prev = oldPair.prev;\r\n\r\n            // Delete Existing Pair from the table, unlink it from chain.\r\n            // As a result, the nElements gets decremented by this operation\r\n            this.remove(oldPair.key);\r\n\r\n            // Link new Pair in place of where oldPair was,\r\n            // by pointing the old pair's neighbors to it.\r\n            newPair.prev.next = newPair;\r\n            newPair.next.prev = newPair;\r\n\r\n            this.table[k] = newPair;\r\n\r\n            // To make up for the fact that the number of elements was decremented,\r\n            // We need to increase it by one.\r\n            ++this.nElements;\r\n\r\n        }\r\n\r\n        /**\r\n         * Associates the specified value with the specified key in this dictionary.\r\n         * If the dictionary previously contained a mapping for this key, the old\r\n         * value is replaced by the specified value.\r\n         * Updating of a key that already exists maintains its place in the \r\n         * insertion order into the map.\r\n         * @param {Object} key key with which the specified value is to be\r\n         * associated.\r\n         * @param {Object} value value to be associated with the specified key.\r\n         * @return {*} previous value associated with the specified key, or undefined if\r\n         * there was no mapping for the key or if the key/value are undefined.\r\n         */\r\n        setValue(key: K, value: V): V {\r\n\r\n            if (collections.isUndefined(key) || collections.isUndefined(value)) {\r\n                return undefined;\r\n            }\r\n\r\n            var existingPair = this.getLinkedDictionaryPair(key);\r\n            var newPair = new LinkedDictionaryPair<K, V>(key, value);\r\n\r\n            var k = '$' + this.toStr(key);\r\n\r\n            // If there is already an element for that key, we \r\n            // keep it's place in the LinkedList\r\n            if (!collections.isUndefined(existingPair)) {\r\n                this.replace(existingPair, newPair);\r\n\r\n                return existingPair.value;\r\n            } else {\r\n                this.appendToTail(newPair);\r\n                this.table[k] = newPair;\r\n                ++this.nElements;\r\n\r\n                return undefined;\r\n            }\r\n\r\n        }\r\n\r\n        /**\r\n         * Returns an array containing all of the keys in this LinkedDictionary, ordered\r\n         * by insertion order.\r\n         * @return {Array} an array containing all of the keys in this LinkedDictionary,\r\n         * ordered by insertion order.\r\n         */\r\n        keys(): K[] {\r\n            var array: K[] = [];\r\n            this.forEach((key, value) => {\r\n                array.push(key);\r\n            });\r\n            return array;\r\n        }\r\n\r\n        /**\r\n         * Returns an array containing all of the values in this LinkedDictionary, ordered by \r\n         * insertion order.\r\n         * @return {Array} an array containing all of the values in this LinkedDictionary,\r\n         * ordered by insertion order.\r\n         */\r\n        values(): V[] {\r\n            var array: V[] = [];\r\n            this.forEach((key, value) => {\r\n                array.push(value);\r\n            });\r\n            return array;\r\n        }\r\n\r\n        /**\r\n        * Executes the provided function once for each key-value pair \r\n        * present in this LinkedDictionary. It is done in the order of insertion\r\n        * into the LinkedDictionary\r\n        * @param {function(Object,Object):*} callback function to execute, it is\r\n        * invoked with two arguments: key and value. To break the iteration you can \r\n        * optionally return false.\r\n        */\r\n        forEach(callback: (key: K, value: V) => any): void {\r\n            var crawlNode = this.head.next;\r\n            while (crawlNode.next != null) {\r\n                var ret = callback(crawlNode.key, crawlNode.value);\r\n                if (ret === false) {\r\n                    return;\r\n                }\r\n                crawlNode = crawlNode.next;\r\n            }\r\n        }\r\n\r\n    } // End of LinkedDictionary\r\n    // /**\r\n    //  * Returns true if this dictionary is equal to the given dictionary.\r\n    //  * Two dictionaries are equal if they contain the same mappings.\r\n    //  * @param {collections.Dictionary} other the other dictionary.\r\n    //  * @param {function(Object,Object):boolean=} valuesEqualFunction optional\r\n    //  * function used to check if two values are equal.\r\n    //  * @return {boolean} true if this dictionary is equal to the given dictionary.\r\n    //  */\r\n    // collections.Dictionary.prototype.equals = function(other,valuesEqualFunction) {\r\n    // \tvar eqF = valuesEqualFunction || collections.defaultEquals;\r\n    // \tif(!(other instanceof collections.Dictionary)){\r\n    // \t\treturn false;\r\n    // \t}\r\n    // \tif(this.size() !== other.size()){\r\n    // \t\treturn false;\r\n    // \t}\r\n    // \treturn this.equalsAux(this.firstNode,other.firstNode,eqF);\r\n    // }\r\n\r\n    export class MultiDictionary<K, V> {\r\n\r\n        // Cannot do: \r\n        // class MultiDictionary<K,V> extends Dictionary<K,Array<V>> {\r\n        // Since we want to reuse the function name setValue and types in signature become incompatible \r\n        // Therefore we are using composition instead of inheritance\r\n        private dict: Dictionary<K, Array<V>>;\r\n        private equalsF: IEqualsFunction<V>;\r\n        private allowDuplicate: boolean;\r\n\r\n      /**\r\n       * Creates an empty multi dictionary.\r\n       * @class <p>A multi dictionary is a special kind of dictionary that holds\r\n       * multiple values against each key. Setting a value into the dictionary will\r\n       * add the value to an array at that key. Getting a key will return an array,\r\n       * holding all the values set to that key.\r\n       * You can configure to allow duplicates in the values.\r\n       * This implementation accepts any kind of objects as keys.</p>\r\n       *\r\n       * <p>If the keys are custom objects a function which converts keys to strings must be\r\n       * provided. Example:</p>\r\n       *\r\n       * <pre>\r\n       * function petToString(pet) {\r\n         *  return pet.name;\r\n         * }\r\n       * </pre>\r\n       * <p>If the values are custom objects a function to check equality between values\r\n       * must be provided. Example:</p>\r\n       *\r\n       * <pre>\r\n       * function petsAreEqualByAge(pet1,pet2) {\r\n         *  return pet1.age===pet2.age;\r\n         * }\r\n       * </pre>\r\n       * @constructor\r\n       * @param {function(Object):string=} toStrFunction optional function\r\n       * to convert keys to strings. If the keys aren't strings or if toString()\r\n       * is not appropriate, a custom function which receives a key and returns a\r\n       * unique string must be provided.\r\n       * @param {function(Object,Object):boolean=} valuesEqualsFunction optional\r\n       * function to check if two values are equal.\r\n       *\r\n       * @param allowDuplicateValues\r\n       */\r\n        constructor(toStrFunction?: (key: K) => string, valuesEqualsFunction?: IEqualsFunction<V>, allowDuplicateValues = false) {\r\n            this.dict = new Dictionary<K, Array<V>>(toStrFunction);\r\n            this.equalsF = valuesEqualsFunction || collections.defaultEquals;\r\n            this.allowDuplicate = allowDuplicateValues;\r\n        }\r\n        /**\r\n        * Returns an array holding the values to which this dictionary maps\r\n        * the specified key.\r\n        * Returns an empty array if this dictionary contains no mappings for this key.\r\n        * @param {Object} key key whose associated values are to be returned.\r\n        * @return {Array} an array holding the values to which this dictionary maps\r\n        * the specified key.\r\n        */\r\n        getValue(key: K): V[] {\r\n            var values = this.dict.getValue(key);\r\n            if (collections.isUndefined(values)) {\r\n                return [];\r\n            }\r\n            return collections.arrays.copy(values);\r\n        }\r\n\r\n        /**\r\n         * Adds the value to the array associated with the specified key, if \r\n         * it is not already present.\r\n         * @param {Object} key key with which the specified value is to be\r\n         * associated.\r\n         * @param {Object} value the value to add to the array at the key\r\n         * @return {boolean} true if the value was not already associated with that key.\r\n         */\r\n        setValue(key: K, value: V): boolean {\r\n\r\n            if (collections.isUndefined(key) || collections.isUndefined(value)) {\r\n                return false;\r\n            }\r\n            if (!this.containsKey(key)) {\r\n                this.dict.setValue(key, [value]);\r\n                return true;\r\n            }\r\n            var array = this.dict.getValue(key);\r\n            if (!this.allowDuplicate) {\r\n                if (collections.arrays.contains(array, value, this.equalsF)) {\r\n                    return false;\r\n                }\r\n            }\r\n            array.push(value);\r\n            return true;\r\n        }\r\n\r\n        /**\r\n         * Removes the specified values from the array of values associated with the\r\n         * specified key. If a value isn't given, all values associated with the specified \r\n         * key are removed.\r\n         * @param {Object} key key whose mapping is to be removed from the\r\n         * dictionary.\r\n         * @param {Object=} value optional argument to specify the value to remove \r\n         * from the array associated with the specified key.\r\n         * @return {*} true if the dictionary changed, false if the key doesn't exist or \r\n         * if the specified value isn't associated with the specified key.\r\n         */\r\n        remove(key: K, value?: V): boolean {\r\n            if (collections.isUndefined(value)) {\r\n                var v = this.dict.remove(key);\r\n                return !collections.isUndefined(v);\r\n            }\r\n            var array = this.dict.getValue(key);\r\n            if (collections.arrays.remove(array, value, this.equalsF)) {\r\n                if (array.length === 0) {\r\n                    this.dict.remove(key);\r\n                }\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * Returns an array containing all of the keys in this dictionary.\r\n         * @return {Array} an array containing all of the keys in this dictionary.\r\n         */\r\n        keys(): K[] {\r\n            return this.dict.keys();\r\n        }\r\n\r\n        /**\r\n         * Returns an array containing all of the values in this dictionary.\r\n         * @return {Array} an array containing all of the values in this dictionary.\r\n         */\r\n        values(): V[] {\r\n            var values = this.dict.values();\r\n            var array:Array<V> = [];\r\n            for (var i = 0; i < values.length; i++) {\r\n                var v = values[i];\r\n                for (var j = 0; j < v.length; j++) {\r\n                    array.push(v[j]);\r\n                }\r\n            }\r\n            return array;\r\n        }\r\n\r\n        /**\r\n         * Returns true if this dictionary at least one value associatted the specified key.\r\n         * @param {Object} key key whose presence in this dictionary is to be\r\n         * tested.\r\n         * @return {boolean} true if this dictionary at least one value associatted \r\n         * the specified key.\r\n         */\r\n        containsKey(key: K): boolean {\r\n            return this.dict.containsKey(key);\r\n        }\r\n\r\n        /**\r\n         * Removes all mappings from this dictionary.\r\n         */\r\n        clear(): void {\r\n            this.dict.clear();\r\n        }\r\n\r\n        /**\r\n         * Returns the number of keys in this dictionary.\r\n         * @return {number} the number of key-value mappings in this dictionary.\r\n         */\r\n        size(): number {\r\n            return this.dict.size();\r\n        }\r\n\r\n        /**\r\n         * Returns true if this dictionary contains no mappings.\r\n         * @return {boolean} true if this dictionary contains no mappings.\r\n         */\r\n        isEmpty(): boolean {\r\n            return this.dict.isEmpty();\r\n        }\r\n    }// end of multi dictionary \r\n\r\n    export class Heap<T> {\r\n        /**\r\n         * Array used to store the elements od the heap.\r\n         * @type {Array.<Object>}\r\n         * @private\r\n         */\r\n        private data: T[] = [];\r\n        /**\r\n         * Function used to compare elements.\r\n         * @type {function(Object,Object):number}\r\n         * @private\r\n         */\r\n        private compare: ICompareFunction<T>;\r\n        /**\r\n         * Creates an empty Heap.\r\n         * @class \r\n         * <p>A heap is a binary tree, where the nodes maintain the heap property: \r\n         * each node is smaller than each of its children and therefore a MinHeap \r\n         * This implementation uses an array to store elements.</p>\r\n         * <p>If the inserted elements are custom objects a compare function must be provided, \r\n         *  at construction time, otherwise the <=, === and >= operators are \r\n         * used to compare elements. Example:</p>\r\n         *\r\n         * <pre>\r\n         * function compare(a, b) {\r\n         *  if (a is less than b by some ordering criterion) {\r\n         *     return -1;\r\n         *  } if (a is greater than b by the ordering criterion) {\r\n         *     return 1;\r\n         *  } \r\n         *  // a must be equal to b\r\n         *  return 0;\r\n         * }\r\n         * </pre>\r\n         *\r\n         * <p>If a Max-Heap is wanted (greater elements on top) you can a provide a\r\n         * reverse compare function to accomplish that behavior. Example:</p>\r\n         *\r\n         * <pre>\r\n         * function reverseCompare(a, b) {\r\n         *  if (a is less than b by some ordering criterion) {\r\n         *     return 1;\r\n         *  } if (a is greater than b by the ordering criterion) {\r\n         *     return -1;\r\n         *  } \r\n         *  // a must be equal to b\r\n         *  return 0;\r\n         * }\r\n         * </pre>\r\n         *\r\n         * @constructor\r\n         * @param {function(Object,Object):number=} compareFunction optional\r\n         * function used to compare two elements. Must return a negative integer,\r\n         * zero, or a positive integer as the first argument is less than, equal to,\r\n         * or greater than the second.\r\n         */\r\n        constructor(compareFunction?: ICompareFunction<T>) {\r\n            this.compare = compareFunction || collections.defaultCompare;\r\n        }\r\n\r\n        /**\r\n         * Returns the index of the left child of the node at the given index.\r\n         * @param {number} nodeIndex The index of the node to get the left child\r\n         * for.\r\n         * @return {number} The index of the left child.\r\n         * @private\r\n         */\r\n        private leftChildIndex(nodeIndex: number): number {\r\n            return (2 * nodeIndex) + 1;\r\n        }\r\n        /**\r\n         * Returns the index of the right child of the node at the given index.\r\n         * @param {number} nodeIndex The index of the node to get the right child\r\n         * for.\r\n         * @return {number} The index of the right child.\r\n         * @private\r\n         */\r\n        private rightChildIndex(nodeIndex: number): number {\r\n            return (2 * nodeIndex) + 2;\r\n        }\r\n        /**\r\n         * Returns the index of the parent of the node at the given index.\r\n         * @param {number} nodeIndex The index of the node to get the parent for.\r\n         * @return {number} The index of the parent.\r\n         * @private\r\n         */\r\n        private parentIndex(nodeIndex: number): number {\r\n            return Math.floor((nodeIndex - 1) / 2);\r\n        }\r\n        /**\r\n         * Returns the index of the smaller child node (if it exists).\r\n         * @param {number} leftChild left child index.\r\n         * @param {number} rightChild right child index.\r\n         * @return {number} the index with the minimum value or -1 if it doesn't\r\n         * exists.\r\n         * @private\r\n         */\r\n        private minIndex(leftChild: number, rightChild: number): number {\r\n\r\n            if (rightChild >= this.data.length) {\r\n                if (leftChild >= this.data.length) {\r\n                    return -1;\r\n                } else {\r\n                    return leftChild;\r\n                }\r\n            } else {\r\n                if (this.compare(this.data[leftChild], this.data[rightChild]) <= 0) {\r\n                    return leftChild;\r\n                } else {\r\n                    return rightChild;\r\n                }\r\n            }\r\n        }\r\n        /**\r\n         * Moves the node at the given index up to its proper place in the heap.\r\n         * @param {number} index The index of the node to move up.\r\n         * @private\r\n         */\r\n        private siftUp(index: number): void {\r\n\r\n            var parent = this.parentIndex(index);\r\n            while (index > 0 && this.compare(this.data[parent], this.data[index]) > 0) {\r\n                collections.arrays.swap(this.data, parent, index);\r\n                index = parent;\r\n                parent = this.parentIndex(index);\r\n            }\r\n        }\r\n        /**\r\n         * Moves the node at the given index down to its proper place in the heap.\r\n         * @param {number} nodeIndex The index of the node to move down.\r\n         * @private\r\n         */\r\n        private siftDown(nodeIndex: number): void {\r\n\r\n            //smaller child index\r\n            var min = this.minIndex(this.leftChildIndex(nodeIndex),\r\n                this.rightChildIndex(nodeIndex));\r\n\r\n            while (min >= 0 && this.compare(this.data[nodeIndex],\r\n                this.data[min]) > 0) {\r\n                collections.arrays.swap(this.data, min, nodeIndex);\r\n                nodeIndex = min;\r\n                min = this.minIndex(this.leftChildIndex(nodeIndex),\r\n                    this.rightChildIndex(nodeIndex));\r\n            }\r\n        }\r\n        /**\r\n         * Retrieves but does not remove the root element of this heap.\r\n         * @return {*} The value at the root of the heap. Returns undefined if the\r\n         * heap is empty.\r\n         */\r\n        peek(): T {\r\n\r\n            if (this.data.length > 0) {\r\n                return this.data[0];\r\n            } else {\r\n                return undefined;\r\n            }\r\n        }\r\n        /**\r\n         * Adds the given element into the heap.\r\n         * @param {*} element the element.\r\n         * @return true if the element was added or fals if it is undefined.\r\n         */\r\n        add(element: T): boolean {\r\n            if (collections.isUndefined(element)) {\r\n                return undefined;\r\n            }\r\n            this.data.push(element);\r\n            this.siftUp(this.data.length - 1);\r\n            return true;\r\n        }\r\n\r\n        /**\r\n         * Retrieves and removes the root element of this heap.\r\n         * @return {*} The value removed from the root of the heap. Returns\r\n         * undefined if the heap is empty.\r\n         */\r\n        removeRoot(): T {\r\n\r\n            if (this.data.length > 0) {\r\n                var obj = this.data[0];\r\n                this.data[0] = this.data[this.data.length - 1];\r\n                this.data.splice(this.data.length - 1, 1);\r\n                if (this.data.length > 0) {\r\n                    this.siftDown(0);\r\n                }\r\n                return obj;\r\n            }\r\n            return undefined;\r\n        }\r\n        /**\r\n         * Returns true if this heap contains the specified element.\r\n         * @param {Object} element element to search for.\r\n         * @return {boolean} true if this Heap contains the specified element, false\r\n         * otherwise.\r\n         */\r\n        contains(element: T): boolean {\r\n            var equF = collections.compareToEquals(this.compare);\r\n            return collections.arrays.contains(this.data, element, equF);\r\n        }\r\n        /**\r\n         * Returns the number of elements in this heap.\r\n         * @return {number} the number of elements in this heap.\r\n         */\r\n        size(): number {\r\n            return this.data.length;\r\n        }\r\n        /**\r\n         * Checks if this heap is empty.\r\n         * @return {boolean} true if and only if this heap contains no items; false\r\n         * otherwise.\r\n         */\r\n        isEmpty(): boolean {\r\n            return this.data.length <= 0;\r\n        }\r\n        /**\r\n         * Removes all of the elements from this heap.\r\n         */\r\n        clear(): void {\r\n            this.data.length = 0;\r\n        }\r\n\r\n        /**\r\n         * Executes the provided function once for each element present in this heap in \r\n         * no particular order.\r\n         * @param {function(Object):*} callback function to execute, it is\r\n         * invoked with one argument: the element value, to break the iteration you can \r\n         * optionally return false.\r\n         */\r\n        forEach(callback: (item: T) => boolean) {\r\n            collections.arrays.forEach(this.data, callback);\r\n        }\r\n    }\r\n\r\n    export class Stack<T> {\r\n        /**\r\n         * List containing the elements.\r\n         * @type collections.LinkedList\r\n         * @private\r\n         */\r\n        private list: LinkedList<T>;\r\n        /**\r\n         * Creates an empty Stack.\r\n         * @class A Stack is a Last-In-First-Out (LIFO) data structure, the last\r\n         * element added to the stack will be the first one to be removed. This\r\n         * implementation uses a linked list as a container.\r\n         * @constructor\r\n         */\r\n        constructor() {\r\n            this.list = new LinkedList<T>();\r\n        }\r\n\r\n        /**\r\n         * Pushes an item onto the top of this stack.\r\n         * @param {Object} elem the element to be pushed onto this stack.\r\n         * @return {boolean} true if the element was pushed or false if it is undefined.\r\n         */\r\n        push(elem: T) {\r\n            return this.list.add(elem, 0);\r\n        }\r\n        /**\r\n         * Pushes an item onto the top of this stack.\r\n         * @param {Object} elem the element to be pushed onto this stack.\r\n         * @return {boolean} true if the element was pushed or false if it is undefined.\r\n         */\r\n        add(elem: T) {\r\n            return this.list.add(elem, 0);\r\n        }\r\n        /**\r\n         * Removes the object at the top of this stack and returns that object.\r\n         * @return {*} the object at the top of this stack or undefined if the\r\n         * stack is empty.\r\n         */\r\n        pop(): T {\r\n            return this.list.removeElementAtIndex(0);\r\n        }\r\n        /**\r\n         * Looks at the object at the top of this stack without removing it from the\r\n         * stack.\r\n         * @return {*} the object at the top of this stack or undefined if the\r\n         * stack is empty.\r\n         */\r\n        peek(): T {\r\n            return this.list.first();\r\n        }\r\n        /**\r\n         * Returns the number of elements in this stack.\r\n         * @return {number} the number of elements in this stack.\r\n         */\r\n        size(): number {\r\n            return this.list.size();\r\n        }\r\n\r\n        /**\r\n         * Returns true if this stack contains the specified element.\r\n         * <p>If the elements inside this stack are\r\n         * not comparable with the === operator, a custom equals function should be\r\n         * provided to perform searches, the function must receive two arguments and\r\n         * return true if they are equal, false otherwise. Example:</p>\r\n         *\r\n         * <pre>\r\n         * var petsAreEqualByName (pet1, pet2) {\r\n         *  return pet1.name === pet2.name;\r\n         * }\r\n         * </pre>\r\n         * @param {Object} elem element to search for.\r\n         * @param {function(Object,Object):boolean=} equalsFunction optional\r\n         * function to check if two elements are equal.\r\n         * @return {boolean} true if this stack contains the specified element,\r\n         * false otherwise.\r\n         */\r\n        contains(elem: T, equalsFunction?: IEqualsFunction<T>) {\r\n            return this.list.contains(elem, equalsFunction);\r\n        }\r\n        /**\r\n         * Checks if this stack is empty.\r\n         * @return {boolean} true if and only if this stack contains no items; false\r\n         * otherwise.\r\n         */\r\n        isEmpty(): boolean {\r\n            return this.list.isEmpty();\r\n        }\r\n        /**\r\n         * Removes all of the elements from this stack.\r\n         */\r\n        clear(): void {\r\n            this.list.clear();\r\n        }\r\n\r\n        /**\r\n         * Executes the provided function once for each element present in this stack in \r\n         * LIFO order.\r\n         * @param {function(Object):*} callback function to execute, it is\r\n         * invoked with one argument: the element value, to break the iteration you can \r\n         * optionally return false.\r\n         */\r\n        forEach(callback: ILoopFunction<T>) {\r\n            this.list.forEach(callback);\r\n        }\r\n    } // End of stack \r\n\r\n\r\n\r\n    export class Queue<T>{\r\n\r\n        /**\r\n         * List containing the elements.\r\n         * @type collections.LinkedList\r\n         * @private\r\n         */\r\n        private list: LinkedList<T>;\r\n\r\n        /**\r\n         * Creates an empty queue.\r\n         * @class A queue is a First-In-First-Out (FIFO) data structure, the first\r\n         * element added to the queue will be the first one to be removed. This\r\n         * implementation uses a linked list as a container.\r\n         * @constructor\r\n         */\r\n        constructor() {\r\n            this.list = new LinkedList<T>();\r\n        }\r\n\r\n\r\n        /**\r\n         * Inserts the specified element into the end of this queue.\r\n         * @param {Object} elem the element to insert.\r\n         * @return {boolean} true if the element was inserted, or false if it is undefined.\r\n         */\r\n        enqueue(elem: T): boolean {\r\n            return this.list.add(elem);\r\n        }\r\n        /**\r\n         * Inserts the specified element into the end of this queue.\r\n         * @param {Object} elem the element to insert.\r\n         * @return {boolean} true if the element was inserted, or false if it is undefined.\r\n         */\r\n        add(elem: T): boolean {\r\n            return this.list.add(elem);\r\n        }\r\n        /**\r\n         * Retrieves and removes the head of this queue.\r\n         * @return {*} the head of this queue, or undefined if this queue is empty.\r\n         */\r\n        dequeue(): T {\r\n            if (this.list.size() !== 0) {\r\n                var el = this.list.first();\r\n                this.list.removeElementAtIndex(0);\r\n                return el;\r\n            }\r\n            return undefined;\r\n        }\r\n        /**\r\n         * Retrieves, but does not remove, the head of this queue.\r\n         * @return {*} the head of this queue, or undefined if this queue is empty.\r\n         */\r\n        peek(): T {\r\n\r\n            if (this.list.size() !== 0) {\r\n                return this.list.first();\r\n            }\r\n            return undefined;\r\n        }\r\n\r\n        /**\r\n         * Returns the number of elements in this queue.\r\n         * @return {number} the number of elements in this queue.\r\n         */\r\n        size(): number {\r\n            return this.list.size();\r\n        }\r\n\r\n        /**\r\n         * Returns true if this queue contains the specified element.\r\n         * <p>If the elements inside this stack are\r\n         * not comparable with the === operator, a custom equals function should be\r\n         * provided to perform searches, the function must receive two arguments and\r\n         * return true if they are equal, false otherwise. Example:</p>\r\n         *\r\n         * <pre>\r\n         * var petsAreEqualByName (pet1, pet2) {\r\n         *  return pet1.name === pet2.name;\r\n         * }\r\n         * </pre>\r\n         * @param {Object} elem element to search for.\r\n         * @param {function(Object,Object):boolean=} equalsFunction optional\r\n         * function to check if two elements are equal.\r\n         * @return {boolean} true if this queue contains the specified element,\r\n         * false otherwise.\r\n         */\r\n        contains(elem: T, equalsFunction?: IEqualsFunction<T>): boolean {\r\n            return this.list.contains(elem, equalsFunction);\r\n        }\r\n\r\n        /**\r\n         * Checks if this queue is empty.\r\n         * @return {boolean} true if and only if this queue contains no items; false\r\n         * otherwise.\r\n         */\r\n        isEmpty(): boolean {\r\n            return this.list.size() <= 0;\r\n        }\r\n\r\n        /**\r\n         * Removes all of the elements from this queue.\r\n         */\r\n        clear(): void {\r\n            this.list.clear();\r\n        }\r\n\r\n        /**\r\n         * Executes the provided function once for each element present in this queue in \r\n         * FIFO order.\r\n         * @param {function(Object):*} callback function to execute, it is\r\n         * invoked with one argument: the element value, to break the iteration you can \r\n         * optionally return false.\r\n         */\r\n        forEach(callback: ILoopFunction<T>) {\r\n            this.list.forEach(callback);\r\n        }\r\n\r\n    } // End of queue\r\n\r\n\r\n    export class PriorityQueue<T> {\r\n\r\n        private heap: Heap<T>;\r\n        /**\r\n         * Creates an empty priority queue.\r\n         * @class <p>In a priority queue each element is associated with a \"priority\",\r\n         * elements are dequeued in highest-priority-first order (the elements with the \r\n         * highest priority are dequeued first). Priority Queues are implemented as heaps. \r\n         * If the inserted elements are custom objects a compare function must be provided, \r\n         * otherwise the <=, === and >= operators are used to compare object priority.</p>\r\n         * <pre>\r\n         * function compare(a, b) {\r\n         *  if (a is less than b by some ordering criterion) {\r\n         *     return -1;\r\n         *  } if (a is greater than b by the ordering criterion) {\r\n         *     return 1;\r\n         *  } \r\n         *  // a must be equal to b\r\n         *  return 0;\r\n         * }\r\n         * </pre>\r\n         * @constructor\r\n         * @param {function(Object,Object):number=} compareFunction optional\r\n         * function used to compare two element priorities. Must return a negative integer,\r\n         * zero, or a positive integer as the first argument is less than, equal to,\r\n         * or greater than the second.\r\n         */\r\n        constructor(compareFunction?: ICompareFunction<T>) {\r\n            this.heap = new Heap<T>(collections.reverseCompareFunction(compareFunction));\r\n        }\r\n\r\n        /**\r\n         * Inserts the specified element into this priority queue.\r\n         * @param {Object} element the element to insert.\r\n         * @return {boolean} true if the element was inserted, or false if it is undefined.\r\n         */\r\n        enqueue(element: T): boolean {\r\n            return this.heap.add(element);\r\n        }\r\n\r\n        /**\r\n         * Inserts the specified element into this priority queue.\r\n         * @param {Object} element the element to insert.\r\n         * @return {boolean} true if the element was inserted, or false if it is undefined.\r\n         */\r\n        add(element: T): boolean {\r\n            return this.heap.add(element);\r\n        }\r\n\r\n        /**\r\n         * Retrieves and removes the highest priority element of this queue.\r\n         * @return {*} the the highest priority element of this queue, \r\n         *  or undefined if this queue is empty.\r\n         */\r\n        dequeue(): T {\r\n            if (this.heap.size() !== 0) {\r\n                var el = this.heap.peek();\r\n                this.heap.removeRoot();\r\n                return el;\r\n            }\r\n            return undefined;\r\n        }\r\n\r\n        /**\r\n         * Retrieves, but does not remove, the highest priority element of this queue.\r\n         * @return {*} the highest priority element of this queue, or undefined if this queue is empty.\r\n         */\r\n        peek(): T {\r\n            return this.heap.peek();\r\n        }\r\n\r\n        /**\r\n         * Returns true if this priority queue contains the specified element.\r\n         * @param {Object} element element to search for.\r\n         * @return {boolean} true if this priority queue contains the specified element,\r\n         * false otherwise.\r\n         */\r\n        contains(element: T): boolean {\r\n            return this.heap.contains(element);\r\n        }\r\n\r\n        /**\r\n         * Checks if this priority queue is empty.\r\n         * @return {boolean} true if and only if this priority queue contains no items; false\r\n         * otherwise.\r\n         */\r\n        isEmpty(): boolean {\r\n            return this.heap.isEmpty();\r\n        }\r\n\r\n        /**\r\n         * Returns the number of elements in this priority queue.\r\n         * @return {number} the number of elements in this priority queue.\r\n         */\r\n        size(): number {\r\n            return this.heap.size();\r\n        }\r\n\r\n        /**\r\n         * Removes all of the elements from this priority queue.\r\n         */\r\n        clear(): void {\r\n            this.heap.clear();\r\n        }\r\n\r\n        /**\r\n         * Executes the provided function once for each element present in this queue in \r\n         * no particular order.\r\n         * @param {function(Object):*} callback function to execute, it is\r\n         * invoked with one argument: the element value, to break the iteration you can \r\n         * optionally return false.\r\n         */\r\n        forEach(callback: ILoopFunction<T>) {\r\n            this.heap.forEach(callback);\r\n        }\r\n\r\n    } // end of priority queue\r\n\r\n\r\n\r\n\r\n    export class Set<T>{\r\n        private dictionary: Dictionary<T, any>;\r\n\r\n        /**\r\n         * Creates an empty set.\r\n         * @class <p>A set is a data structure that contains no duplicate items.</p>\r\n         * <p>If the inserted elements are custom objects a function \r\n         * which converts elements to strings must be provided. Example:</p>\r\n         *\r\n         * <pre>\r\n         * function petToString(pet) {\r\n         *  return pet.name;\r\n         * }\r\n         * </pre>\r\n         *\r\n         * @constructor\r\n         * @param {function(Object):string=} toStringFunction optional function used\r\n         * to convert elements to strings. If the elements aren't strings or if toString()\r\n         * is not appropriate, a custom function which receives a onject and returns a\r\n         * unique string must be provided.\r\n         */\r\n        constructor(toStringFunction?: (item: T) => string) {\r\n            this.dictionary = new Dictionary<T, any>(toStringFunction);\r\n        }\r\n\r\n\r\n\r\n        /**\r\n         * Returns true if this set contains the specified element.\r\n         * @param {Object} element element to search for.\r\n         * @return {boolean} true if this set contains the specified element,\r\n         * false otherwise.\r\n         */\r\n        contains(element: T): boolean {\r\n            return this.dictionary.containsKey(element);\r\n        }\r\n\r\n        /**\r\n         * Adds the specified element to this set if it is not already present.\r\n         * @param {Object} element the element to insert.\r\n         * @return {boolean} true if this set did not already contain the specified element.\r\n         */\r\n        add(element: T): boolean {\r\n            if (this.contains(element) || collections.isUndefined(element)) {\r\n                return false;\r\n            } else {\r\n                this.dictionary.setValue(element, element);\r\n                return true;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Performs an intersecion between this an another set.\r\n         * Removes all values that are not present this set and the given set.\r\n         * @param {collections.Set} otherSet other set.\r\n         */\r\n        intersection(otherSet: Set<T>): void {\r\n            var set = this;\r\n            this.forEach(function (element: T): boolean {\r\n                if (!otherSet.contains(element)) {\r\n                    set.remove(element);\r\n                }\r\n                return true;\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Performs a union between this an another set.\r\n         * Adds all values from the given set to this set.\r\n         * @param {collections.Set} otherSet other set.\r\n         */\r\n        union(otherSet: Set<T>): void {\r\n            var set = this;\r\n            otherSet.forEach(function (element: T): boolean {\r\n                set.add(element);\r\n                return true;\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Performs a difference between this an another set.\r\n         * Removes from this set all the values that are present in the given set.\r\n         * @param {collections.Set} otherSet other set.\r\n         */\r\n        difference(otherSet: Set<T>): void {\r\n            var set = this;\r\n            otherSet.forEach(function (element: T): boolean {\r\n                set.remove(element);\r\n                return true;\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Checks whether the given set contains all the elements in this set.\r\n         * @param {collections.Set} otherSet other set.\r\n         * @return {boolean} true if this set is a subset of the given set.\r\n         */\r\n        isSubsetOf(otherSet: Set<T>): boolean {\r\n\r\n            if (this.size() > otherSet.size()) {\r\n                return false;\r\n            }\r\n\r\n            var isSub = true;\r\n            this.forEach(function (element) {\r\n                if (!otherSet.contains(element)) {\r\n                    isSub = false;\r\n                    return false;\r\n                }\r\n            return true;\r\n            });\r\n            return isSub;\r\n        }\r\n\r\n        /**\r\n         * Removes the specified element from this set if it is present.\r\n         * @return {boolean} true if this set contained the specified element.\r\n         */\r\n        remove(element: T): boolean {\r\n            if (!this.contains(element)) {\r\n                return false;\r\n            } else {\r\n                this.dictionary.remove(element);\r\n                return true;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Executes the provided function once for each element \r\n         * present in this set.\r\n         * @param {function(Object):*} callback function to execute, it is\r\n         * invoked with one arguments: the element. To break the iteration you can \r\n         * optionally return false.\r\n         */\r\n        forEach(callback: ILoopFunction<T>): void {\r\n            this.dictionary.forEach(function (k, v) {\r\n                return callback(v);\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Returns an array containing all of the elements in this set in arbitrary order.\r\n         * @return {Array} an array containing all of the elements in this set.\r\n         */\r\n        toArray(): T[] {\r\n            return this.dictionary.values();\r\n        }\r\n\r\n        /**\r\n         * Returns true if this set contains no elements.\r\n         * @return {boolean} true if this set contains no elements.\r\n         */\r\n        isEmpty(): boolean {\r\n            return this.dictionary.isEmpty();\r\n        }\r\n\r\n        /**\r\n         * Returns the number of elements in this set.\r\n         * @return {number} the number of elements in this set.\r\n         */\r\n        size(): number {\r\n            return this.dictionary.size();\r\n        }\r\n\r\n        /**\r\n         * Removes all of the elements from this set.\r\n         */\r\n        clear(): void {\r\n            this.dictionary.clear();\r\n        }\r\n\r\n        /*\r\n        * Provides a string representation for display\r\n        */\r\n        toString(): string {\r\n            return collections.arrays.toString(this.toArray());\r\n        }\r\n    }// end of Set\r\n\r\n    export class Bag<T>{\r\n\r\n        private toStrF: (item: T) => string;\r\n        private dictionary: Dictionary<T, any>;\r\n        private nElements: number;\r\n\r\n        /**\r\n         * Creates an empty bag.\r\n         * @class <p>A bag is a special kind of set in which members are \r\n         * allowed to appear more than once.</p>\r\n         * <p>If the inserted elements are custom objects a function \r\n         * which converts elements to unique strings must be provided. Example:</p>\r\n         *\r\n         * <pre>\r\n         * function petToString(pet) {\r\n         *  return pet.name;\r\n         * }\r\n         * </pre>\r\n         *\r\n         * @constructor\r\n         * @param {function(Object):string=} toStrFunction optional function used\r\n         * to convert elements to strings. If the elements aren't strings or if toString()\r\n         * is not appropriate, a custom function which receives an object and returns a\r\n         * unique string must be provided.\r\n         */\r\n        constructor(toStrFunction?: (item: T) => string) {\r\n            this.toStrF = toStrFunction || collections.defaultToString;\r\n            this.dictionary = new Dictionary<T, any>(this.toStrF);\r\n            this.nElements = 0;\r\n        }\r\n\r\n\r\n        /**\r\n        * Adds nCopies of the specified object to this bag.\r\n        * @param {Object} element element to add.\r\n        * @param {number=} nCopies the number of copies to add, if this argument is\r\n        * undefined 1 copy is added.\r\n        * @return {boolean} true unless element is undefined.\r\n        */\r\n        add(element: T, nCopies: number= 1): boolean {\r\n\r\n            if (collections.isUndefined(element) || nCopies <= 0) {\r\n                return false;\r\n            }\r\n\r\n            if (!this.contains(element)) {\r\n                var node = {\r\n                    value: element,\r\n                    copies: nCopies\r\n                };\r\n                this.dictionary.setValue(element, node);\r\n            } else {\r\n                this.dictionary.getValue(element).copies += nCopies;\r\n            }\r\n            this.nElements += nCopies;\r\n            return true;\r\n        }\r\n\r\n        /**\r\n        * Counts the number of copies of the specified object in this bag.\r\n        * @param {Object} element the object to search for..\r\n        * @return {number} the number of copies of the object, 0 if not found\r\n        */\r\n        count(element: T): number {\r\n\r\n            if (!this.contains(element)) {\r\n                return 0;\r\n            } else {\r\n                return this.dictionary.getValue(element).copies;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Returns true if this bag contains the specified element.\r\n         * @param {Object} element element to search for.\r\n         * @return {boolean} true if this bag contains the specified element,\r\n         * false otherwise.\r\n         */\r\n        contains(element: T): boolean {\r\n            return this.dictionary.containsKey(element);\r\n        }\r\n\r\n        /**\r\n        * Removes nCopies of the specified object to this bag.\r\n        * If the number of copies to remove is greater than the actual number \r\n        * of copies in the Bag, all copies are removed. \r\n        * @param {Object} element element to remove.\r\n        * @param {number=} nCopies the number of copies to remove, if this argument is\r\n        * undefined 1 copy is removed.\r\n        * @return {boolean} true if at least 1 element was removed.\r\n        */\r\n        remove(element: T, nCopies: number = 1) {\r\n\r\n            if (collections.isUndefined(element) || nCopies <= 0) {\r\n                return false;\r\n            }\r\n\r\n            if (!this.contains(element)) {\r\n                return false;\r\n            } else {\r\n                var node = this.dictionary.getValue(element);\r\n                if (nCopies > node.copies) {\r\n                    this.nElements -= node.copies;\r\n                } else {\r\n                    this.nElements -= nCopies;\r\n                }\r\n                node.copies -= nCopies;\r\n                if (node.copies <= 0) {\r\n                    this.dictionary.remove(element);\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Returns an array containing all of the elements in this big in arbitrary order, \r\n         * including multiple copies.\r\n         * @return {Array} an array containing all of the elements in this bag.\r\n         */\r\n        toArray(): T[] {\r\n            var a:Array<T> = [];\r\n            var values = this.dictionary.values();\r\n            var vl = values.length;\r\n            for (var i = 0; i < vl; i++) {\r\n                var node = values[i];\r\n                var element = node.value;\r\n                var copies = node.copies;\r\n                for (var j = 0; j < copies; j++) {\r\n                    a.push(element);\r\n                }\r\n            }\r\n            return a;\r\n        }\r\n\r\n        /**\r\n         * Returns a set of unique elements in this bag. \r\n         * @return {collections.Set<T>} a set of unique elements in this bag.\r\n         */\r\n        toSet(): Set<T> {\r\n            var toret = new Set<T>(this.toStrF);\r\n            var elements = this.dictionary.values();\r\n            var l = elements.length;\r\n            for (var i = 0; i < l; i++) {\r\n                var value = elements[i].value;\r\n                toret.add(value);\r\n            }\r\n            return toret;\r\n        }\r\n\r\n        /**\r\n         * Executes the provided function once for each element \r\n         * present in this bag, including multiple copies.\r\n         * @param {function(Object):*} callback function to execute, it is\r\n         * invoked with one argument: the element. To break the iteration you can \r\n         * optionally return false.\r\n         */\r\n        forEach(callback: ILoopFunction<T>) {\r\n            this.dictionary.forEach(function (k, v) {\r\n                var value = v.value;\r\n                var copies = v.copies;\r\n                for (var i = 0; i < copies; i++) {\r\n                    if (callback(value) === false) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            });\r\n        }\r\n        /**\r\n         * Returns the number of elements in this bag.\r\n         * @return {number} the number of elements in this bag.\r\n         */\r\n        size(): number {\r\n            return this.nElements;\r\n        }\r\n\r\n        /**\r\n         * Returns true if this bag contains no elements.\r\n         * @return {boolean} true if this bag contains no elements.\r\n         */\r\n        isEmpty(): boolean {\r\n            return this.nElements === 0;\r\n        }\r\n\r\n        /**\r\n         * Removes all of the elements from this bag.\r\n         */\r\n        clear(): void {\r\n            this.nElements = 0;\r\n            this.dictionary.clear();\r\n        }\r\n\r\n    }// End of bag \r\n\r\n\r\n    // Internal interface for BST \r\n    interface BSTreeNode<T>{\r\n        element: T;\r\n        leftCh: BSTreeNode<T>;\r\n        rightCh: BSTreeNode<T>;\r\n        parent: BSTreeNode<T>;\r\n    }\r\n    export class BSTree<T> {\r\n\r\n        private root: BSTreeNode<T>;\r\n        private compare: ICompareFunction<T>;\r\n        private nElements: number;\r\n        /**\r\n         * Creates an empty binary search tree.\r\n         * @class <p>A binary search tree is a binary tree in which each \r\n         * internal node stores an element such that the elements stored in the \r\n         * left subtree are less than it and the elements \r\n         * stored in the right subtree are greater.</p>\r\n         * <p>Formally, a binary search tree is a node-based binary tree data structure which \r\n         * has the following properties:</p>\r\n         * <ul>\r\n         * <li>The left subtree of a node contains only nodes with elements less \r\n         * than the node's element</li>\r\n         * <li>The right subtree of a node contains only nodes with elements greater \r\n         * than the node's element</li>\r\n         * <li>Both the left and right subtrees must also be binary search trees.</li>\r\n         * </ul>\r\n         * <p>If the inserted elements are custom objects a compare function must \r\n         * be provided at construction time, otherwise the <=, === and >= operators are \r\n         * used to compare elements. Example:</p>\r\n         * <pre>\r\n         * function compare(a, b) {\r\n         *  if (a is less than b by some ordering criterion) {\r\n         *     return -1;\r\n         *  } if (a is greater than b by the ordering criterion) {\r\n         *     return 1;\r\n         *  } \r\n         *  // a must be equal to b\r\n         *  return 0;\r\n         * }\r\n         * </pre>\r\n         * @constructor\r\n         * @param {function(Object,Object):number=} compareFunction optional\r\n         * function used to compare two elements. Must return a negative integer,\r\n         * zero, or a positive integer as the first argument is less than, equal to,\r\n         * or greater than the second.\r\n         */\r\n        constructor(compareFunction?: ICompareFunction<T>) {\r\n            this.root = null;\r\n            this.compare = compareFunction || collections.defaultCompare;\r\n            this.nElements = 0;\r\n        }\r\n\r\n        /**\r\n         * Adds the specified element to this tree if it is not already present.\r\n         * @param {Object} element the element to insert.\r\n         * @return {boolean} true if this tree did not already contain the specified element.\r\n         */\r\n        add(element: T): boolean {\r\n            if (collections.isUndefined(element)) {\r\n                return false;\r\n            }\r\n\r\n            if (this.insertNode(this.createNode(element)) !== null) {\r\n                this.nElements++;\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * Removes all of the elements from this tree.\r\n         */\r\n        clear(): void {\r\n            this.root = null;\r\n            this.nElements = 0;\r\n        }\r\n\r\n        /**\r\n         * Returns true if this tree contains no elements.\r\n         * @return {boolean} true if this tree contains no elements.\r\n         */\r\n        isEmpty(): boolean {\r\n            return this.nElements === 0;\r\n        }\r\n\r\n        /**\r\n         * Returns the number of elements in this tree.\r\n         * @return {number} the number of elements in this tree.\r\n         */\r\n        size(): number {\r\n            return this.nElements;\r\n        }\r\n\r\n        /**\r\n         * Returns true if this tree contains the specified element.\r\n         * @param {Object} element element to search for.\r\n         * @return {boolean} true if this tree contains the specified element,\r\n         * false otherwise.\r\n         */\r\n        contains(element: T): boolean {\r\n            if (collections.isUndefined(element)) {\r\n                return false;\r\n            }\r\n            return this.searchNode(this.root, element) !== null;\r\n        }\r\n\r\n        /**\r\n         * Removes the specified element from this tree if it is present.\r\n         * @return {boolean} true if this tree contained the specified element.\r\n         */\r\n        remove(element: T): boolean {\r\n            var node = this.searchNode(this.root, element);\r\n            if (node === null) {\r\n                return false;\r\n            }\r\n            this.removeNode(node);\r\n            this.nElements--;\r\n            return true;\r\n        }\r\n\r\n        /**\r\n         * Executes the provided function once for each element present in this tree in \r\n         * in-order.\r\n         * @param {function(Object):*} callback function to execute, it is invoked with one \r\n         * argument: the element value, to break the iteration you can optionally return false.\r\n         */\r\n        inorderTraversal(callback: ILoopFunction<T>): void {\r\n            this.inorderTraversalAux(this.root, callback, {\r\n                stop: false\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Executes the provided function once for each element present in this tree in pre-order.\r\n         * @param {function(Object):*} callback function to execute, it is invoked with one \r\n         * argument: the element value, to break the iteration you can optionally return false.\r\n         */\r\n        preorderTraversal(callback: ILoopFunction<T>): void {\r\n            this.preorderTraversalAux(this.root, callback, {\r\n                stop: false\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Executes the provided function once for each element present in this tree in post-order.\r\n         * @param {function(Object):*} callback function to execute, it is invoked with one \r\n         * argument: the element value, to break the iteration you can optionally return false.\r\n         */\r\n        postorderTraversal(callback: ILoopFunction<T>): void {\r\n            this.postorderTraversalAux(this.root, callback, {\r\n                stop: false\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Executes the provided function once for each element present in this tree in \r\n         * level-order.\r\n         * @param {function(Object):*} callback function to execute, it is invoked with one \r\n         * argument: the element value, to break the iteration you can optionally return false.\r\n         */\r\n        levelTraversal(callback: ILoopFunction<T>): void {\r\n            this.levelTraversalAux(this.root, callback);\r\n        }\r\n\r\n        /**\r\n         * Returns the minimum element of this tree.\r\n         * @return {*} the minimum element of this tree or undefined if this tree is\r\n         * is empty.\r\n         */\r\n        minimum(): T {\r\n            if (this.isEmpty()) {\r\n                return undefined;\r\n            }\r\n            return this.minimumAux(this.root).element;\r\n        }\r\n\r\n        /**\r\n         * Returns the maximum element of this tree.\r\n         * @return {*} the maximum element of this tree or undefined if this tree is\r\n         * is empty.\r\n         */\r\n        maximum(): T {\r\n            if (this.isEmpty()) {\r\n                return undefined;\r\n            }\r\n            return this.maximumAux(this.root).element;\r\n        }\r\n\r\n        /**\r\n         * Executes the provided function once for each element present in this tree in inorder.\r\n         * Equivalent to inorderTraversal.\r\n         * @param {function(Object):*} callback function to execute, it is\r\n         * invoked with one argument: the element value, to break the iteration you can \r\n         * optionally return false.\r\n         */\r\n        forEach(callback: ILoopFunction<T>): void {\r\n            this.inorderTraversal(callback);\r\n        }\r\n\r\n        /**\r\n         * Returns an array containing all of the elements in this tree in in-order.\r\n         * @return {Array} an array containing all of the elements in this tree in in-order.\r\n         */\r\n        toArray(): T[] {\r\n            var array: Array<T> = [];\r\n            this.inorderTraversal(function (element: T): boolean {\r\n                array.push(element);\r\n                return true;\r\n            });\r\n            return array;\r\n        }\r\n\r\n        /**\r\n         * Returns the height of this tree.\r\n         * @return {number} the height of this tree or -1 if is empty.\r\n         */\r\n        height(): number {\r\n            return this.heightAux(this.root);\r\n        }\r\n\r\n        /**\r\n        * @private\r\n        */\r\n        private searchNode(node: BSTreeNode<T>, element: T): BSTreeNode<T> {\r\n            var cmp:number = null;\r\n            while (node !== null && cmp !== 0) {\r\n                cmp = this.compare(element, node.element);\r\n                if (cmp < 0) {\r\n                    node = node.leftCh;\r\n                } else if (cmp > 0) {\r\n                    node = node.rightCh;\r\n                }\r\n            }\r\n            return node;\r\n        }\r\n\r\n        /**\r\n        * @private\r\n        */\r\n        private transplant(n1: BSTreeNode<T>, n2: BSTreeNode<T>): void {\r\n            if (n1.parent === null) {\r\n                this.root = n2;\r\n            } else if (n1 === n1.parent.leftCh) {\r\n                n1.parent.leftCh = n2;\r\n            } else {\r\n                n1.parent.rightCh = n2;\r\n            }\r\n            if (n2 !== null) {\r\n                n2.parent = n1.parent;\r\n            }\r\n        }\r\n\r\n        /**\r\n        * @private\r\n        */\r\n        private removeNode(node: BSTreeNode<T>): void {\r\n            if (node.leftCh === null) {\r\n                this.transplant(node, node.rightCh);\r\n            } else if (node.rightCh === null) {\r\n                this.transplant(node, node.leftCh);\r\n            } else {\r\n                var y = this.minimumAux(node.rightCh);\r\n                if (y.parent !== node) {\r\n                    this.transplant(y, y.rightCh);\r\n                    y.rightCh = node.rightCh;\r\n                    y.rightCh.parent = y;\r\n                }\r\n                this.transplant(node, y);\r\n                y.leftCh = node.leftCh;\r\n                y.leftCh.parent = y;\r\n            }\r\n        }\r\n\r\n        /**\r\n        * @private\r\n        */\r\n        private inorderTraversalAux(node: BSTreeNode<T>, callback: ILoopFunction<T>, signal: { stop: boolean; }): void {\r\n            if (node === null || signal.stop) {\r\n                return;\r\n            }\r\n            this.inorderTraversalAux(node.leftCh, callback, signal);\r\n            if (signal.stop) {\r\n                return;\r\n            }\r\n            signal.stop = callback(node.element) === false;\r\n            if (signal.stop) {\r\n                return;\r\n            }\r\n            this.inorderTraversalAux(node.rightCh, callback, signal);\r\n        }\r\n\r\n        /**\r\n        * @private\r\n        */\r\n        private levelTraversalAux(node: BSTreeNode<T>, callback: ILoopFunction<T>) {\r\n            var queue = new Queue<BSTreeNode<T>>();\r\n            if (node !== null) {\r\n                queue.enqueue(node);\r\n            }\r\n            while (!queue.isEmpty()) {\r\n                node = queue.dequeue();\r\n                if (callback(node.element) === false) {\r\n                    return;\r\n                }\r\n                if (node.leftCh !== null) {\r\n                    queue.enqueue(node.leftCh);\r\n                }\r\n                if (node.rightCh !== null) {\r\n                    queue.enqueue(node.rightCh);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n        * @private\r\n        */\r\n        private preorderTraversalAux(node: BSTreeNode<T>, callback: ILoopFunction<T>, signal: { stop: boolean; }) {\r\n            if (node === null || signal.stop) {\r\n                return;\r\n            }\r\n            signal.stop = callback(node.element) === false;\r\n            if (signal.stop) {\r\n                return;\r\n            }\r\n            this.preorderTraversalAux(node.leftCh, callback, signal);\r\n            if (signal.stop) {\r\n                return;\r\n            }\r\n            this.preorderTraversalAux(node.rightCh, callback, signal);\r\n        }\r\n        /**\r\n        * @private\r\n        */\r\n        private postorderTraversalAux(node: BSTreeNode<T>, callback: ILoopFunction<T>, signal: { stop: boolean; }) {\r\n            if (node === null || signal.stop) {\r\n                return;\r\n            }\r\n            this.postorderTraversalAux(node.leftCh, callback, signal);\r\n            if (signal.stop) {\r\n                return;\r\n            }\r\n            this.postorderTraversalAux(node.rightCh, callback, signal);\r\n            if (signal.stop) {\r\n                return;\r\n            }\r\n            signal.stop = callback(node.element) === false;\r\n        }\r\n\r\n        /**\r\n        * @private\r\n        */\r\n        private minimumAux(node: BSTreeNode<T>): BSTreeNode<T> {\r\n            while (node.leftCh !== null) {\r\n                node = node.leftCh;\r\n            }\r\n            return node;\r\n        }\r\n\r\n        /**\r\n        * @private\r\n        */\r\n        private maximumAux(node: BSTreeNode<T>): BSTreeNode<T> {\r\n            while (node.rightCh !== null) {\r\n                node = node.rightCh;\r\n            }\r\n            return node;\r\n        }\r\n\r\n      /**\r\n        * @private\r\n        */\r\n        private heightAux(node: BSTreeNode<T>): number {\r\n            if (node === null) {\r\n                return -1;\r\n            }\r\n            return Math.max(this.heightAux(node.leftCh), this.heightAux(node.rightCh)) + 1;\r\n        }\r\n\r\n        /*\r\n        * @private\r\n        */\r\n        private insertNode(node: BSTreeNode<T>): BSTreeNode<T> {\r\n\r\n            var parent: any = null;\r\n            var position = this.root;\r\n            var cmp:number = null;\r\n            while (position !== null) {\r\n                cmp = this.compare(node.element, position.element);\r\n                if (cmp === 0) {\r\n                    return null;\r\n                } else if (cmp < 0) {\r\n                    parent = position;\r\n                    position = position.leftCh;\r\n                } else {\r\n                    parent = position;\r\n                    position = position.rightCh;\r\n                }\r\n            }\r\n            node.parent = parent;\r\n            if (parent === null) {\r\n                // tree is empty\r\n                this.root = node;\r\n            } else if (this.compare(node.element, parent.element) < 0) {\r\n                parent.leftCh = node;\r\n            } else {\r\n                parent.rightCh = node;\r\n            }\r\n            return node;\r\n        }\r\n\r\n        /**\r\n        * @private\r\n        */\r\n        private createNode(element: T): BSTreeNode<T> {\r\n            return {\r\n                element: element,\r\n                leftCh: null,\r\n                rightCh: null,\r\n                parent: null\r\n            };\r\n        }\r\n\r\n    } // end of BSTree\r\n\r\n\r\n}// End of module ","/// <reference path=\"collections.ts\" />\n\nclass KeyboardState {\n\tstatic k = {\n\t\t8: \"backspace\", 9: \"tab\", 13: \"enter\", 16: \"shift\",\n\t\t17: \"ctrl\", 18: \"alt\", 27: \"esc\", 32: \"space\",\n\t\t33: \"pageup\", 34: \"pagedown\", 35: \"end\", 36: \"home\",\n\t\t37: \"left\", 38: \"up\", 39: \"right\", 40: \"down\",\n\t\t45: \"insert\", 46: \"delete\", 186: \";\", 187: \"=\",\n\t\t188: \",\", 189: \"-\", 190: \".\", 191: \"/\",\n\t\t219: \"[\", 220: \"\\\\\", 221: \"]\", 222: \"'\"\n\t};\n\tstatic status = {};\n\n\tconstructor() {\n\t\tdocument.addEventListener(\"keydown\", KeyboardState.onKeyDown, false);\n\t\tdocument.addEventListener(\"keyup\", KeyboardState.onKeyUp, false);\n\t}\n\n\tstatic keyName(keyCode) {\n\t\treturn (KeyboardState.k[keyCode] != null) ?\n\t\t\tKeyboardState.k[keyCode] :\n\t\t\tString.fromCharCode(keyCode);\n\t}\n\n\tstatic onKeyUp(event) {\n\t\tvar key = KeyboardState.keyName(event.keyCode);\n\t\tif (KeyboardState.status[key])\n\t\t\tKeyboardState.status[key].pressed = false;\n\t}\n\n\tstatic onKeyDown(event) {\n\t\tvar key = KeyboardState.keyName(event.keyCode);\n\t\tif (!KeyboardState.status[key])\n\t\t\tKeyboardState.status[key] = { down: false, pressed: false, up: false, updatedPreviously: false };\n\t}\n\n\tupdate() {\n\t\tfor (var key in KeyboardState.status) {\n\t\t\t// insure that every keypress has \"down\" status exactly once\n\t\t\tif (!KeyboardState.status[key].updatedPreviously) {\n\t\t\t\tKeyboardState.status[key].down = true;\n\t\t\t\tKeyboardState.status[key].pressed = true;\n\t\t\t\tKeyboardState.status[key].updatedPreviously = true;\n\t\t\t}\n\t\t\telse // updated previously\n\t\t\t{\n\t\t\t\tKeyboardState.status[key].down = false;\n\t\t\t}\n\n\t\t\t// key has been flagged as \"up\" since last update\n\t\t\tif (KeyboardState.status[key].up) {\n\t\t\t\tdelete KeyboardState.status[key];\n\t\t\t\tcontinue; // move on to next key\n\t\t\t}\n\n\t\t\tif (!KeyboardState.status[key].pressed) // key released\n\t\t\t\tKeyboardState.status[key].up = true;\n\t\t}\n\t}\n\n\tdown(keyName) {\n\t\treturn (KeyboardState.status[keyName] && KeyboardState.status[keyName].down);\n\t}\n\n\tpressed(keyName) {\n\t\treturn (KeyboardState.status[keyName] && KeyboardState.status[keyName].pressed);\n\t}\n\n\tup(keyName) {\n\t\treturn (KeyboardState.status[keyName] && KeyboardState.status[keyName].up);\n\t}\n}","/// <reference path=\"tsd/bundle.d.ts\" />\n/// <reference path=\"collections.ts\" />\n/// <reference path=\"keyboardState.ts\" />\n\nmodule RunningElderly {\n\texport var SEGMENT_LENGTH: number = 60;\n\texport var TRACK_WIDTH: number = 10;\n\texport var MAX_SEGMENT_NUMBER: number = 4;\n\n\texport class REScene extends THREE.Scene {\n\t\tgetObjectById(id: string | number): THREE.Object3D {\n\t\t\treturn super.getObjectById(<string> id);\n\t\t}\n\t\t\n\t\tremoveObjectById(id: string | number): void {\n\t\t\tsuper.remove(super.getObjectById(<string> id));\n\t\t}\n\t}\n}","/// <reference path=\"tsd/bundle.d.ts\" />\n/// <reference path=\"base.ts\" />\n\nmodule RunningElderly {\n\texport class RoadManager {\n\t\tscene: REScene;\n\t\tsegmentIds: Array<number>;\n\n\t\tconstructor(scene: REScene) {\n\t\t\tthis.scene = scene;\n\t\t\tthis.segmentIds = new Array();\n\t\t}\n\n\t\tanimate = (keyboard: KeyboardState): void => {\n\t\t\tif (this.segmentIds.length == 0) {\n\t\t\t\tvar roadSegment = new RoadSegment();\n\t\t\t\tthis.segmentIds.push(roadSegment.id);\n\t\t\t\tthis.scene.add(roadSegment);\n\t\t\t}\n\t\t\tif (this.scene.getObjectById(this.segmentIds[0]).position.z >= SEGMENT_LENGTH) {\n\t\t\t\tthis.scene.removeObjectById(this.segmentIds[0]);\n\t\t\t\tthis.segmentIds = this.segmentIds.slice(1, this.segmentIds.length);\n\t\t\t}\n\t\t\tif (this.segmentIds.length <= MAX_SEGMENT_NUMBER &&\n\t\t\t\tthis.scene.getObjectById(this.segmentIds[this.segmentIds.length - 1]).position.z >= - (MAX_SEGMENT_NUMBER - 1) * SEGMENT_LENGTH) {\n\t\t\t\tvar roadSegment = new RoadSegment();\n\t\t\t\tthis.segmentIds.push(roadSegment.id);\n\t\t\t\tthis.scene.add(roadSegment);\n\t\t\t}\n\t\t\tthis.segmentIds.forEach((segmentId) => ++this.scene.getObjectById(segmentId).position.z);\n\t\t}\n\t}\n\n\tclass RoadSegment extends THREE.Group {\n\t\tprivate roadTrackLeft: RoadTrackLeft;\n\t\tprivate roadTrackMiddle: RoadTrackMiddle;\n\t\tprivate roadTrackRight: RoadTrackRight;\n\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis.roadTrackLeft = new RoadTrackLeft();\n\t\t\tthis.add(this.roadTrackLeft);\n\n\t\t\tthis.roadTrackMiddle = new RoadTrackMiddle();\n\t\t\tthis.add(this.roadTrackMiddle);\n\n\t\t\tthis.roadTrackRight = new RoadTrackRight();\n\t\t\tthis.add(this.roadTrackRight);\n\n\t\t\tthis.translateZ(- MAX_SEGMENT_NUMBER * SEGMENT_LENGTH);\n\t\t}\n\t}\n\n\t// abstract class\n\tclass RoadTrack extends THREE.Group {\n\t\tconstructor(material: THREE.Material) {\n\t\t\tsuper();\n\t\t\tvar roadSurface: RoadSurface = new RoadSurface(material);\n\t\t\tthis.add(roadSurface);\n\t\t\tfor (var i = 0; i < 3; ++i) {\n\t\t\t\tif (Math.round(Math.random()))\n\t\t\t\t\tthis.add(new RoadObstacle(Math.round(Math.random() * 2.5) * 2, roadSurface.position));\n\t\t\t}\n\t\t}\n\n\t\taddObstacle(obstacle: RoadObstacle): void {\n\t\t\tthis.add(obstacle);\n\t\t}\n\n\t\taddObstacles(obstacles: Array<RoadObstacle>): void {\n\t\t\tobstacles.forEach((obs) => this.add(obs));\n\t\t}\n\n\t\tremoveObstacle(obstacle: RoadObstacle): void {\n\t\t\tthis.remove(obstacle);\n\t\t}\n\t}\n\n\tclass RoadTrackLeft extends RoadTrack {\n\t\tconstructor() {\n\t\t\tsuper(new THREE.MeshBasicMaterial({\n\t\t\t\tcolor: new THREE.Color(Math.random() * 255, Math.random() * 255, Math.random() * 255).getHex(),\n\t\t\t\tside: THREE.DoubleSide\n\t\t\t}));\n\t\t\tthis.translateX(TRACK_WIDTH);\n\t\t}\n\t}\n\n\tclass RoadTrackMiddle extends RoadTrack {\n\t\tconstructor() {\n\t\t\tsuper(new THREE.MeshBasicMaterial({\n\t\t\t\tcolor: new THREE.Color(Math.random() * 255, Math.random() * 255, Math.random() * 255).getHex(),\n\t\t\t\tside: THREE.DoubleSide\n\t\t\t}));\n\t\t}\n\t}\n\n\tclass RoadTrackRight extends RoadTrack {\n\t\tconstructor() {\n\t\t\tsuper(new THREE.MeshBasicMaterial({\n\t\t\t\tcolor: new THREE.Color(Math.random() * 255, Math.random() * 255, Math.random() * 255).getHex(),\n\t\t\t\tside: THREE.DoubleSide\n\t\t\t}));\n\t\t\tthis.translateX(-TRACK_WIDTH);\n\t\t}\n\t}\n\n\tclass RoadSurface extends THREE.Mesh {\n\t\tconstructor(material: THREE.Material) {\n\t\t\tsuper(new THREE.PlaneBufferGeometry(TRACK_WIDTH, SEGMENT_LENGTH), material);\n\t\t\tthis.rotateX(Math.PI / 2);\n\t\t}\n\t}\n\n\tclass RoadObstacle extends THREE.Mesh {\n\t\tindex: number;\n\t\tconstructor(index: number, position: THREE.Vector3) {\n\t\t\tvar geometry: THREE.PlaneBufferGeometry = new THREE.PlaneBufferGeometry(TRACK_WIDTH, TRACK_WIDTH);\n\t\t\tvar material: THREE.Material = new THREE.MeshBasicMaterial({\n\t\t\t\tcolor: 0xffffff,\n\t\t\t\ttransparent: true,\n\t\t\t\topacity: 0.2,\n\t\t\t\tside: THREE.DoubleSide\n\t\t\t});\n\t\t\tsuper(geometry, material);\n\t\t\tthis.position.set(position.x, position.y + TRACK_WIDTH * 0.5, position.z + index * TRACK_WIDTH - SEGMENT_LENGTH * 0.5);\n\t\t}\n\t}\n}","/// <reference path=\"tsd/bundle.d.ts\" />\n/// <reference path=\"base.ts\" />\n\nmodule RunningElderly {\n\texport class CharacterManager {\n\t\tscene: REScene;\n\t\tcharacter: Character;\n\n\t\tconstructor(scene: REScene, keyboard: KeyboardState) {\n\t\t\tthis.scene = scene;\n\t\t\tthis.character = new Character();\n\t\t\tscene.add(this.character);\n\t\t}\n\n\t\tanimate = (keyboard: KeyboardState): void => {\n\t\t\tif (keyboard.down('left')) {\n\t\t\t\tif (this.character.position.x > - TRACK_WIDTH) this.character.translateX(- TRACK_WIDTH);\n\t\t\t} else if (keyboard.down('right')) {\n\t\t\t\tif (this.character.position.x < TRACK_WIDTH) this.character.translateX(TRACK_WIDTH);\n\t\t\t}\n\t\t}\n\t}\n\n\tclass Character extends THREE.Mesh {\n\t\tconstructor() {\n\t\t\tvar geometry: THREE.PlaneBufferGeometry = new THREE.PlaneBufferGeometry(TRACK_WIDTH, TRACK_WIDTH);\n\t\t\tvar texture: THREE.Texture = THREE.ImageUtils.loadTexture('build/img/elderly.png');\n\t\t\ttexture.minFilter = THREE.NearestFilter;\n\t\t\tvar material: THREE.Material = new THREE.MeshBasicMaterial({\n\t\t\t\tmap: texture,\n\t\t\t\ttransparent: true,\n\t\t\t\tside: THREE.FrontSide\n\t\t\t});\n\t\t\tsuper(geometry, material);\n\t\t\tthis.position.set(0, TRACK_WIDTH / 2, TRACK_WIDTH * 1.8);\n\t\t}\n\t}\n}","/// <reference path=\"tsd/bundle.d.ts\" />\n/// <reference path=\"base.ts\" />\n/// <reference path=\"road.ts\" />\n/// <reference path=\"character.ts\" />\n\nmodule RunningElderly {\n\tvar scene: REScene;\n\tvar camera: THREE.Camera;\n\tvar renderer: THREE.WebGLRenderer;\n\n\texport class Game {\n\t\tkeyboard: KeyboardState;\n\t\troadManager: RoadManager;\n\t\tcharacterManager: CharacterManager;\n\n\t\tconstructor(domElem: HTMLElement) {\n\t\t\tscene = new REScene();\n\t\t\tcamera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 1, 10000);\n\t\t\trenderer = new THREE.WebGLRenderer({\n\t\t\t\tprecision: \"highp\",\n\t\t\t\tantialias: true\n\t\t\t});\n\n\t\t\t// Camera settup\n\t\t\tcamera.position.y = 15;\n\t\t\tcamera.position.z = 30;\n\t\t\tcamera.lookAt(scene.position);\n\n\t\t\t// Rendering settup\n\t\t\trenderer.setSize(window.innerWidth, window.innerHeight);\n\t\t\tthis.bindTo(domElem);\n\n\t\t\tthis.keyboard = new KeyboardState();\n\t\t\tthis.roadManager = new RoadManager(scene);\n\t\t\tthis.characterManager = new CharacterManager(scene, this.keyboard);\n\t\t}\n\n\t\tbindTo(domElem: HTMLElement): void {\n\t\t\tdomElem.appendChild(renderer.domElement);\n\t\t}\n\n\t\tstart(): void {\n\t\t\tthis.render();\n\t\t}\n\n\t\trender(): void {\n\t\t\trequestAnimationFrame(() => this.render());\n\t\t\tthis.keyboard.update();\n\t\t\tthis.roadManager.animate(this.keyboard);\n\t\t\tthis.characterManager.animate(this.keyboard);\n\t\t\trenderer.render(scene, camera);\n\t\t}\n\t}\n\n}\n\nwindow.onload = () => {\n\tvar game: RunningElderly.Game = new RunningElderly.Game(document.body);\n\tgame.start();\n};"],"sourceRoot":"/source/"}